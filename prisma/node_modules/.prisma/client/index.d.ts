
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Guide
 * 
 */
export type Guide = $Result.DefaultSelection<Prisma.$GuidePayload>
/**
 * Model OverviewDifficulty
 * 
 */
export type OverviewDifficulty = $Result.DefaultSelection<Prisma.$OverviewDifficultyPayload>
/**
 * Model HeroTalents
 * 
 */
export type HeroTalents = $Result.DefaultSelection<Prisma.$HeroTalentsPayload>
/**
 * Model Tab
 * 
 */
export type Tab = $Result.DefaultSelection<Prisma.$TabPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.guide`: Exposes CRUD operations for the **Guide** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guides
    * const guides = await prisma.guide.findMany()
    * ```
    */
  get guide(): Prisma.GuideDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.overviewDifficulty`: Exposes CRUD operations for the **OverviewDifficulty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OverviewDifficulties
    * const overviewDifficulties = await prisma.overviewDifficulty.findMany()
    * ```
    */
  get overviewDifficulty(): Prisma.OverviewDifficultyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.heroTalents`: Exposes CRUD operations for the **HeroTalents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HeroTalents
    * const heroTalents = await prisma.heroTalents.findMany()
    * ```
    */
  get heroTalents(): Prisma.HeroTalentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tab`: Exposes CRUD operations for the **Tab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tabs
    * const tabs = await prisma.tab.findMany()
    * ```
    */
  get tab(): Prisma.TabDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Guide: 'Guide',
    OverviewDifficulty: 'OverviewDifficulty',
    HeroTalents: 'HeroTalents',
    Tab: 'Tab'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "guide" | "overviewDifficulty" | "heroTalents" | "tab"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Guide: {
        payload: Prisma.$GuidePayload<ExtArgs>
        fields: Prisma.GuideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuideFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuideFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          findFirst: {
            args: Prisma.GuideFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuideFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          findMany: {
            args: Prisma.GuideFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>[]
          }
          create: {
            args: Prisma.GuideCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          createMany: {
            args: Prisma.GuideCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GuideCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>[]
          }
          delete: {
            args: Prisma.GuideDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          update: {
            args: Prisma.GuideUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          deleteMany: {
            args: Prisma.GuideDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuideUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GuideUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>[]
          }
          upsert: {
            args: Prisma.GuideUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          aggregate: {
            args: Prisma.GuideAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuide>
          }
          groupBy: {
            args: Prisma.GuideGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuideGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuideCountArgs<ExtArgs>
            result: $Utils.Optional<GuideCountAggregateOutputType> | number
          }
        }
      }
      OverviewDifficulty: {
        payload: Prisma.$OverviewDifficultyPayload<ExtArgs>
        fields: Prisma.OverviewDifficultyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OverviewDifficultyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OverviewDifficultyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>
          }
          findFirst: {
            args: Prisma.OverviewDifficultyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OverviewDifficultyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>
          }
          findMany: {
            args: Prisma.OverviewDifficultyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>[]
          }
          create: {
            args: Prisma.OverviewDifficultyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>
          }
          createMany: {
            args: Prisma.OverviewDifficultyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OverviewDifficultyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>[]
          }
          delete: {
            args: Prisma.OverviewDifficultyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>
          }
          update: {
            args: Prisma.OverviewDifficultyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>
          }
          deleteMany: {
            args: Prisma.OverviewDifficultyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OverviewDifficultyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OverviewDifficultyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>[]
          }
          upsert: {
            args: Prisma.OverviewDifficultyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewDifficultyPayload>
          }
          aggregate: {
            args: Prisma.OverviewDifficultyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOverviewDifficulty>
          }
          groupBy: {
            args: Prisma.OverviewDifficultyGroupByArgs<ExtArgs>
            result: $Utils.Optional<OverviewDifficultyGroupByOutputType>[]
          }
          count: {
            args: Prisma.OverviewDifficultyCountArgs<ExtArgs>
            result: $Utils.Optional<OverviewDifficultyCountAggregateOutputType> | number
          }
        }
      }
      HeroTalents: {
        payload: Prisma.$HeroTalentsPayload<ExtArgs>
        fields: Prisma.HeroTalentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HeroTalentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HeroTalentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>
          }
          findFirst: {
            args: Prisma.HeroTalentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HeroTalentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>
          }
          findMany: {
            args: Prisma.HeroTalentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>[]
          }
          create: {
            args: Prisma.HeroTalentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>
          }
          createMany: {
            args: Prisma.HeroTalentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HeroTalentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>[]
          }
          delete: {
            args: Prisma.HeroTalentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>
          }
          update: {
            args: Prisma.HeroTalentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>
          }
          deleteMany: {
            args: Prisma.HeroTalentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HeroTalentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HeroTalentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>[]
          }
          upsert: {
            args: Prisma.HeroTalentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroTalentsPayload>
          }
          aggregate: {
            args: Prisma.HeroTalentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHeroTalents>
          }
          groupBy: {
            args: Prisma.HeroTalentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<HeroTalentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.HeroTalentsCountArgs<ExtArgs>
            result: $Utils.Optional<HeroTalentsCountAggregateOutputType> | number
          }
        }
      }
      Tab: {
        payload: Prisma.$TabPayload<ExtArgs>
        fields: Prisma.TabFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TabFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TabFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>
          }
          findFirst: {
            args: Prisma.TabFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TabFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>
          }
          findMany: {
            args: Prisma.TabFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>[]
          }
          create: {
            args: Prisma.TabCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>
          }
          createMany: {
            args: Prisma.TabCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TabCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>[]
          }
          delete: {
            args: Prisma.TabDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>
          }
          update: {
            args: Prisma.TabUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>
          }
          deleteMany: {
            args: Prisma.TabDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TabUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TabUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>[]
          }
          upsert: {
            args: Prisma.TabUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TabPayload>
          }
          aggregate: {
            args: Prisma.TabAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTab>
          }
          groupBy: {
            args: Prisma.TabGroupByArgs<ExtArgs>
            result: $Utils.Optional<TabGroupByOutputType>[]
          }
          count: {
            args: Prisma.TabCountArgs<ExtArgs>
            result: $Utils.Optional<TabCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    guide?: GuideOmit
    overviewDifficulty?: OverviewDifficultyOmit
    heroTalents?: HeroTalentsOmit
    tab?: TabOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HeroTalentsCountOutputType
   */

  export type HeroTalentsCountOutputType = {
    tabs: number
  }

  export type HeroTalentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tabs?: boolean | HeroTalentsCountOutputTypeCountTabsArgs
  }

  // Custom InputTypes
  /**
   * HeroTalentsCountOutputType without action
   */
  export type HeroTalentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalentsCountOutputType
     */
    select?: HeroTalentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HeroTalentsCountOutputType without action
   */
  export type HeroTalentsCountOutputTypeCountTabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TabWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    provider: string | null
    providerId: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    provider: string | null
    providerId: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    role: number
    provider: number
    providerId: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    role?: true
    provider?: true
    providerId?: true
    createdAt?: true
    updateAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    role?: true
    provider?: true
    providerId?: true
    createdAt?: true
    updateAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    role?: true
    provider?: true
    providerId?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    fullName: string
    email: string
    password: string
    role: $Enums.UserRole
    provider: string | null
    providerId: string | null
    createdAt: Date
    updateAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "email" | "password" | "role" | "provider" | "providerId" | "createdAt" | "updateAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fullName: string
      email: string
      password: string
      role: $Enums.UserRole
      provider: string | null
      providerId: string | null
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly provider: FieldRef<"User", 'String'>
    readonly providerId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updateAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Guide
   */

  export type AggregateGuide = {
    _count: GuideCountAggregateOutputType | null
    _avg: GuideAvgAggregateOutputType | null
    _sum: GuideSumAggregateOutputType | null
    _min: GuideMinAggregateOutputType | null
    _max: GuideMaxAggregateOutputType | null
  }

  export type GuideAvgAggregateOutputType = {
    id: number | null
  }

  export type GuideSumAggregateOutputType = {
    id: number | null
  }

  export type GuideMinAggregateOutputType = {
    id: number | null
    spec: string | null
    mode: string | null
    title: string | null
    patch: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuideMaxAggregateOutputType = {
    id: number | null
    spec: string | null
    mode: string | null
    title: string | null
    patch: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuideCountAggregateOutputType = {
    id: number
    spec: number
    mode: number
    title: number
    patch: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GuideAvgAggregateInputType = {
    id?: true
  }

  export type GuideSumAggregateInputType = {
    id?: true
  }

  export type GuideMinAggregateInputType = {
    id?: true
    spec?: true
    mode?: true
    title?: true
    patch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuideMaxAggregateInputType = {
    id?: true
    spec?: true
    mode?: true
    title?: true
    patch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuideCountAggregateInputType = {
    id?: true
    spec?: true
    mode?: true
    title?: true
    patch?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GuideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guide to aggregate.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guides
    **/
    _count?: true | GuideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuideAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuideSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuideMaxAggregateInputType
  }

  export type GetGuideAggregateType<T extends GuideAggregateArgs> = {
        [P in keyof T & keyof AggregateGuide]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuide[P]>
      : GetScalarType<T[P], AggregateGuide[P]>
  }




  export type GuideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuideWhereInput
    orderBy?: GuideOrderByWithAggregationInput | GuideOrderByWithAggregationInput[]
    by: GuideScalarFieldEnum[] | GuideScalarFieldEnum
    having?: GuideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuideCountAggregateInputType | true
    _avg?: GuideAvgAggregateInputType
    _sum?: GuideSumAggregateInputType
    _min?: GuideMinAggregateInputType
    _max?: GuideMaxAggregateInputType
  }

  export type GuideGroupByOutputType = {
    id: number
    spec: string
    mode: string
    title: string | null
    patch: string | null
    createdAt: Date
    updatedAt: Date
    _count: GuideCountAggregateOutputType | null
    _avg: GuideAvgAggregateOutputType | null
    _sum: GuideSumAggregateOutputType | null
    _min: GuideMinAggregateOutputType | null
    _max: GuideMaxAggregateOutputType | null
  }

  type GetGuideGroupByPayload<T extends GuideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuideGroupByOutputType[P]>
            : GetScalarType<T[P], GuideGroupByOutputType[P]>
        }
      >
    >


  export type GuideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spec?: boolean
    mode?: boolean
    title?: boolean
    patch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    overviewDifficulty?: boolean | Guide$overviewDifficultyArgs<ExtArgs>
    heroTalents?: boolean | Guide$heroTalentsArgs<ExtArgs>
  }, ExtArgs["result"]["guide"]>

  export type GuideSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spec?: boolean
    mode?: boolean
    title?: boolean
    patch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["guide"]>

  export type GuideSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spec?: boolean
    mode?: boolean
    title?: boolean
    patch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["guide"]>

  export type GuideSelectScalar = {
    id?: boolean
    spec?: boolean
    mode?: boolean
    title?: boolean
    patch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GuideOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spec" | "mode" | "title" | "patch" | "createdAt" | "updatedAt", ExtArgs["result"]["guide"]>
  export type GuideInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    overviewDifficulty?: boolean | Guide$overviewDifficultyArgs<ExtArgs>
    heroTalents?: boolean | Guide$heroTalentsArgs<ExtArgs>
  }
  export type GuideIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GuideIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GuidePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guide"
    objects: {
      overviewDifficulty: Prisma.$OverviewDifficultyPayload<ExtArgs> | null
      heroTalents: Prisma.$HeroTalentsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      spec: string
      mode: string
      title: string | null
      patch: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["guide"]>
    composites: {}
  }

  type GuideGetPayload<S extends boolean | null | undefined | GuideDefaultArgs> = $Result.GetResult<Prisma.$GuidePayload, S>

  type GuideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GuideFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GuideCountAggregateInputType | true
    }

  export interface GuideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guide'], meta: { name: 'Guide' } }
    /**
     * Find zero or one Guide that matches the filter.
     * @param {GuideFindUniqueArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuideFindUniqueArgs>(args: SelectSubset<T, GuideFindUniqueArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Guide that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GuideFindUniqueOrThrowArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuideFindUniqueOrThrowArgs>(args: SelectSubset<T, GuideFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Guide that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideFindFirstArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuideFindFirstArgs>(args?: SelectSubset<T, GuideFindFirstArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Guide that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideFindFirstOrThrowArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuideFindFirstOrThrowArgs>(args?: SelectSubset<T, GuideFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Guides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guides
     * const guides = await prisma.guide.findMany()
     * 
     * // Get first 10 Guides
     * const guides = await prisma.guide.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guideWithIdOnly = await prisma.guide.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GuideFindManyArgs>(args?: SelectSubset<T, GuideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Guide.
     * @param {GuideCreateArgs} args - Arguments to create a Guide.
     * @example
     * // Create one Guide
     * const Guide = await prisma.guide.create({
     *   data: {
     *     // ... data to create a Guide
     *   }
     * })
     * 
     */
    create<T extends GuideCreateArgs>(args: SelectSubset<T, GuideCreateArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Guides.
     * @param {GuideCreateManyArgs} args - Arguments to create many Guides.
     * @example
     * // Create many Guides
     * const guide = await prisma.guide.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuideCreateManyArgs>(args?: SelectSubset<T, GuideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Guides and returns the data saved in the database.
     * @param {GuideCreateManyAndReturnArgs} args - Arguments to create many Guides.
     * @example
     * // Create many Guides
     * const guide = await prisma.guide.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Guides and only return the `id`
     * const guideWithIdOnly = await prisma.guide.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GuideCreateManyAndReturnArgs>(args?: SelectSubset<T, GuideCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Guide.
     * @param {GuideDeleteArgs} args - Arguments to delete one Guide.
     * @example
     * // Delete one Guide
     * const Guide = await prisma.guide.delete({
     *   where: {
     *     // ... filter to delete one Guide
     *   }
     * })
     * 
     */
    delete<T extends GuideDeleteArgs>(args: SelectSubset<T, GuideDeleteArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Guide.
     * @param {GuideUpdateArgs} args - Arguments to update one Guide.
     * @example
     * // Update one Guide
     * const guide = await prisma.guide.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuideUpdateArgs>(args: SelectSubset<T, GuideUpdateArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Guides.
     * @param {GuideDeleteManyArgs} args - Arguments to filter Guides to delete.
     * @example
     * // Delete a few Guides
     * const { count } = await prisma.guide.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuideDeleteManyArgs>(args?: SelectSubset<T, GuideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guides
     * const guide = await prisma.guide.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuideUpdateManyArgs>(args: SelectSubset<T, GuideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guides and returns the data updated in the database.
     * @param {GuideUpdateManyAndReturnArgs} args - Arguments to update many Guides.
     * @example
     * // Update many Guides
     * const guide = await prisma.guide.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Guides and only return the `id`
     * const guideWithIdOnly = await prisma.guide.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GuideUpdateManyAndReturnArgs>(args: SelectSubset<T, GuideUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Guide.
     * @param {GuideUpsertArgs} args - Arguments to update or create a Guide.
     * @example
     * // Update or create a Guide
     * const guide = await prisma.guide.upsert({
     *   create: {
     *     // ... data to create a Guide
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guide we want to update
     *   }
     * })
     */
    upsert<T extends GuideUpsertArgs>(args: SelectSubset<T, GuideUpsertArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Guides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideCountArgs} args - Arguments to filter Guides to count.
     * @example
     * // Count the number of Guides
     * const count = await prisma.guide.count({
     *   where: {
     *     // ... the filter for the Guides we want to count
     *   }
     * })
    **/
    count<T extends GuideCountArgs>(
      args?: Subset<T, GuideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guide.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuideAggregateArgs>(args: Subset<T, GuideAggregateArgs>): Prisma.PrismaPromise<GetGuideAggregateType<T>>

    /**
     * Group by Guide.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuideGroupByArgs['orderBy'] }
        : { orderBy?: GuideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guide model
   */
  readonly fields: GuideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guide.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    overviewDifficulty<T extends Guide$overviewDifficultyArgs<ExtArgs> = {}>(args?: Subset<T, Guide$overviewDifficultyArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    heroTalents<T extends Guide$heroTalentsArgs<ExtArgs> = {}>(args?: Subset<T, Guide$heroTalentsArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Guide model
   */
  interface GuideFieldRefs {
    readonly id: FieldRef<"Guide", 'Int'>
    readonly spec: FieldRef<"Guide", 'String'>
    readonly mode: FieldRef<"Guide", 'String'>
    readonly title: FieldRef<"Guide", 'String'>
    readonly patch: FieldRef<"Guide", 'String'>
    readonly createdAt: FieldRef<"Guide", 'DateTime'>
    readonly updatedAt: FieldRef<"Guide", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Guide findUnique
   */
  export type GuideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where: GuideWhereUniqueInput
  }

  /**
   * Guide findUniqueOrThrow
   */
  export type GuideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where: GuideWhereUniqueInput
  }

  /**
   * Guide findFirst
   */
  export type GuideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guides.
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guides.
     */
    distinct?: GuideScalarFieldEnum | GuideScalarFieldEnum[]
  }

  /**
   * Guide findFirstOrThrow
   */
  export type GuideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guides.
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guides.
     */
    distinct?: GuideScalarFieldEnum | GuideScalarFieldEnum[]
  }

  /**
   * Guide findMany
   */
  export type GuideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * Filter, which Guides to fetch.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guides.
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    distinct?: GuideScalarFieldEnum | GuideScalarFieldEnum[]
  }

  /**
   * Guide create
   */
  export type GuideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * The data needed to create a Guide.
     */
    data: XOR<GuideCreateInput, GuideUncheckedCreateInput>
  }

  /**
   * Guide createMany
   */
  export type GuideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guides.
     */
    data: GuideCreateManyInput | GuideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Guide createManyAndReturn
   */
  export type GuideCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * The data used to create many Guides.
     */
    data: GuideCreateManyInput | GuideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Guide update
   */
  export type GuideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * The data needed to update a Guide.
     */
    data: XOR<GuideUpdateInput, GuideUncheckedUpdateInput>
    /**
     * Choose, which Guide to update.
     */
    where: GuideWhereUniqueInput
  }

  /**
   * Guide updateMany
   */
  export type GuideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guides.
     */
    data: XOR<GuideUpdateManyMutationInput, GuideUncheckedUpdateManyInput>
    /**
     * Filter which Guides to update
     */
    where?: GuideWhereInput
    /**
     * Limit how many Guides to update.
     */
    limit?: number
  }

  /**
   * Guide updateManyAndReturn
   */
  export type GuideUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * The data used to update Guides.
     */
    data: XOR<GuideUpdateManyMutationInput, GuideUncheckedUpdateManyInput>
    /**
     * Filter which Guides to update
     */
    where?: GuideWhereInput
    /**
     * Limit how many Guides to update.
     */
    limit?: number
  }

  /**
   * Guide upsert
   */
  export type GuideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * The filter to search for the Guide to update in case it exists.
     */
    where: GuideWhereUniqueInput
    /**
     * In case the Guide found by the `where` argument doesn't exist, create a new Guide with this data.
     */
    create: XOR<GuideCreateInput, GuideUncheckedCreateInput>
    /**
     * In case the Guide was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuideUpdateInput, GuideUncheckedUpdateInput>
  }

  /**
   * Guide delete
   */
  export type GuideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
    /**
     * Filter which Guide to delete.
     */
    where: GuideWhereUniqueInput
  }

  /**
   * Guide deleteMany
   */
  export type GuideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guides to delete
     */
    where?: GuideWhereInput
    /**
     * Limit how many Guides to delete.
     */
    limit?: number
  }

  /**
   * Guide.overviewDifficulty
   */
  export type Guide$overviewDifficultyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    where?: OverviewDifficultyWhereInput
  }

  /**
   * Guide.heroTalents
   */
  export type Guide$heroTalentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    where?: HeroTalentsWhereInput
  }

  /**
   * Guide without action
   */
  export type GuideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guide
     */
    omit?: GuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuideInclude<ExtArgs> | null
  }


  /**
   * Model OverviewDifficulty
   */

  export type AggregateOverviewDifficulty = {
    _count: OverviewDifficultyCountAggregateOutputType | null
    _avg: OverviewDifficultyAvgAggregateOutputType | null
    _sum: OverviewDifficultySumAggregateOutputType | null
    _min: OverviewDifficultyMinAggregateOutputType | null
    _max: OverviewDifficultyMaxAggregateOutputType | null
  }

  export type OverviewDifficultyAvgAggregateOutputType = {
    id: number | null
    singleTarget: number | null
    multiTarget: number | null
    utility: number | null
    survivability: number | null
    mobility: number | null
    guideId: number | null
  }

  export type OverviewDifficultySumAggregateOutputType = {
    id: number | null
    singleTarget: number | null
    multiTarget: number | null
    utility: number | null
    survivability: number | null
    mobility: number | null
    guideId: number | null
  }

  export type OverviewDifficultyMinAggregateOutputType = {
    id: number | null
    spec: string | null
    mode: string | null
    singleTarget: number | null
    multiTarget: number | null
    utility: number | null
    survivability: number | null
    mobility: number | null
    guideId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OverviewDifficultyMaxAggregateOutputType = {
    id: number | null
    spec: string | null
    mode: string | null
    singleTarget: number | null
    multiTarget: number | null
    utility: number | null
    survivability: number | null
    mobility: number | null
    guideId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OverviewDifficultyCountAggregateOutputType = {
    id: number
    spec: number
    mode: number
    singleTarget: number
    multiTarget: number
    utility: number
    survivability: number
    mobility: number
    guideId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OverviewDifficultyAvgAggregateInputType = {
    id?: true
    singleTarget?: true
    multiTarget?: true
    utility?: true
    survivability?: true
    mobility?: true
    guideId?: true
  }

  export type OverviewDifficultySumAggregateInputType = {
    id?: true
    singleTarget?: true
    multiTarget?: true
    utility?: true
    survivability?: true
    mobility?: true
    guideId?: true
  }

  export type OverviewDifficultyMinAggregateInputType = {
    id?: true
    spec?: true
    mode?: true
    singleTarget?: true
    multiTarget?: true
    utility?: true
    survivability?: true
    mobility?: true
    guideId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OverviewDifficultyMaxAggregateInputType = {
    id?: true
    spec?: true
    mode?: true
    singleTarget?: true
    multiTarget?: true
    utility?: true
    survivability?: true
    mobility?: true
    guideId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OverviewDifficultyCountAggregateInputType = {
    id?: true
    spec?: true
    mode?: true
    singleTarget?: true
    multiTarget?: true
    utility?: true
    survivability?: true
    mobility?: true
    guideId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OverviewDifficultyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OverviewDifficulty to aggregate.
     */
    where?: OverviewDifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverviewDifficulties to fetch.
     */
    orderBy?: OverviewDifficultyOrderByWithRelationInput | OverviewDifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OverviewDifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverviewDifficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverviewDifficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OverviewDifficulties
    **/
    _count?: true | OverviewDifficultyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OverviewDifficultyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OverviewDifficultySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OverviewDifficultyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OverviewDifficultyMaxAggregateInputType
  }

  export type GetOverviewDifficultyAggregateType<T extends OverviewDifficultyAggregateArgs> = {
        [P in keyof T & keyof AggregateOverviewDifficulty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOverviewDifficulty[P]>
      : GetScalarType<T[P], AggregateOverviewDifficulty[P]>
  }




  export type OverviewDifficultyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OverviewDifficultyWhereInput
    orderBy?: OverviewDifficultyOrderByWithAggregationInput | OverviewDifficultyOrderByWithAggregationInput[]
    by: OverviewDifficultyScalarFieldEnum[] | OverviewDifficultyScalarFieldEnum
    having?: OverviewDifficultyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OverviewDifficultyCountAggregateInputType | true
    _avg?: OverviewDifficultyAvgAggregateInputType
    _sum?: OverviewDifficultySumAggregateInputType
    _min?: OverviewDifficultyMinAggregateInputType
    _max?: OverviewDifficultyMaxAggregateInputType
  }

  export type OverviewDifficultyGroupByOutputType = {
    id: number
    spec: string
    mode: string
    singleTarget: number
    multiTarget: number
    utility: number
    survivability: number
    mobility: number
    guideId: number
    createdAt: Date
    updatedAt: Date
    _count: OverviewDifficultyCountAggregateOutputType | null
    _avg: OverviewDifficultyAvgAggregateOutputType | null
    _sum: OverviewDifficultySumAggregateOutputType | null
    _min: OverviewDifficultyMinAggregateOutputType | null
    _max: OverviewDifficultyMaxAggregateOutputType | null
  }

  type GetOverviewDifficultyGroupByPayload<T extends OverviewDifficultyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OverviewDifficultyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OverviewDifficultyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OverviewDifficultyGroupByOutputType[P]>
            : GetScalarType<T[P], OverviewDifficultyGroupByOutputType[P]>
        }
      >
    >


  export type OverviewDifficultySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spec?: boolean
    mode?: boolean
    singleTarget?: boolean
    multiTarget?: boolean
    utility?: boolean
    survivability?: boolean
    mobility?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["overviewDifficulty"]>

  export type OverviewDifficultySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spec?: boolean
    mode?: boolean
    singleTarget?: boolean
    multiTarget?: boolean
    utility?: boolean
    survivability?: boolean
    mobility?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["overviewDifficulty"]>

  export type OverviewDifficultySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spec?: boolean
    mode?: boolean
    singleTarget?: boolean
    multiTarget?: boolean
    utility?: boolean
    survivability?: boolean
    mobility?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["overviewDifficulty"]>

  export type OverviewDifficultySelectScalar = {
    id?: boolean
    spec?: boolean
    mode?: boolean
    singleTarget?: boolean
    multiTarget?: boolean
    utility?: boolean
    survivability?: boolean
    mobility?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OverviewDifficultyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spec" | "mode" | "singleTarget" | "multiTarget" | "utility" | "survivability" | "mobility" | "guideId" | "createdAt" | "updatedAt", ExtArgs["result"]["overviewDifficulty"]>
  export type OverviewDifficultyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }
  export type OverviewDifficultyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }
  export type OverviewDifficultyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }

  export type $OverviewDifficultyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OverviewDifficulty"
    objects: {
      guide: Prisma.$GuidePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      spec: string
      mode: string
      singleTarget: number
      multiTarget: number
      utility: number
      survivability: number
      mobility: number
      guideId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["overviewDifficulty"]>
    composites: {}
  }

  type OverviewDifficultyGetPayload<S extends boolean | null | undefined | OverviewDifficultyDefaultArgs> = $Result.GetResult<Prisma.$OverviewDifficultyPayload, S>

  type OverviewDifficultyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OverviewDifficultyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OverviewDifficultyCountAggregateInputType | true
    }

  export interface OverviewDifficultyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OverviewDifficulty'], meta: { name: 'OverviewDifficulty' } }
    /**
     * Find zero or one OverviewDifficulty that matches the filter.
     * @param {OverviewDifficultyFindUniqueArgs} args - Arguments to find a OverviewDifficulty
     * @example
     * // Get one OverviewDifficulty
     * const overviewDifficulty = await prisma.overviewDifficulty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OverviewDifficultyFindUniqueArgs>(args: SelectSubset<T, OverviewDifficultyFindUniqueArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OverviewDifficulty that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OverviewDifficultyFindUniqueOrThrowArgs} args - Arguments to find a OverviewDifficulty
     * @example
     * // Get one OverviewDifficulty
     * const overviewDifficulty = await prisma.overviewDifficulty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OverviewDifficultyFindUniqueOrThrowArgs>(args: SelectSubset<T, OverviewDifficultyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OverviewDifficulty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewDifficultyFindFirstArgs} args - Arguments to find a OverviewDifficulty
     * @example
     * // Get one OverviewDifficulty
     * const overviewDifficulty = await prisma.overviewDifficulty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OverviewDifficultyFindFirstArgs>(args?: SelectSubset<T, OverviewDifficultyFindFirstArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OverviewDifficulty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewDifficultyFindFirstOrThrowArgs} args - Arguments to find a OverviewDifficulty
     * @example
     * // Get one OverviewDifficulty
     * const overviewDifficulty = await prisma.overviewDifficulty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OverviewDifficultyFindFirstOrThrowArgs>(args?: SelectSubset<T, OverviewDifficultyFindFirstOrThrowArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OverviewDifficulties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewDifficultyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OverviewDifficulties
     * const overviewDifficulties = await prisma.overviewDifficulty.findMany()
     * 
     * // Get first 10 OverviewDifficulties
     * const overviewDifficulties = await prisma.overviewDifficulty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const overviewDifficultyWithIdOnly = await prisma.overviewDifficulty.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OverviewDifficultyFindManyArgs>(args?: SelectSubset<T, OverviewDifficultyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OverviewDifficulty.
     * @param {OverviewDifficultyCreateArgs} args - Arguments to create a OverviewDifficulty.
     * @example
     * // Create one OverviewDifficulty
     * const OverviewDifficulty = await prisma.overviewDifficulty.create({
     *   data: {
     *     // ... data to create a OverviewDifficulty
     *   }
     * })
     * 
     */
    create<T extends OverviewDifficultyCreateArgs>(args: SelectSubset<T, OverviewDifficultyCreateArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OverviewDifficulties.
     * @param {OverviewDifficultyCreateManyArgs} args - Arguments to create many OverviewDifficulties.
     * @example
     * // Create many OverviewDifficulties
     * const overviewDifficulty = await prisma.overviewDifficulty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OverviewDifficultyCreateManyArgs>(args?: SelectSubset<T, OverviewDifficultyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OverviewDifficulties and returns the data saved in the database.
     * @param {OverviewDifficultyCreateManyAndReturnArgs} args - Arguments to create many OverviewDifficulties.
     * @example
     * // Create many OverviewDifficulties
     * const overviewDifficulty = await prisma.overviewDifficulty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OverviewDifficulties and only return the `id`
     * const overviewDifficultyWithIdOnly = await prisma.overviewDifficulty.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OverviewDifficultyCreateManyAndReturnArgs>(args?: SelectSubset<T, OverviewDifficultyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OverviewDifficulty.
     * @param {OverviewDifficultyDeleteArgs} args - Arguments to delete one OverviewDifficulty.
     * @example
     * // Delete one OverviewDifficulty
     * const OverviewDifficulty = await prisma.overviewDifficulty.delete({
     *   where: {
     *     // ... filter to delete one OverviewDifficulty
     *   }
     * })
     * 
     */
    delete<T extends OverviewDifficultyDeleteArgs>(args: SelectSubset<T, OverviewDifficultyDeleteArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OverviewDifficulty.
     * @param {OverviewDifficultyUpdateArgs} args - Arguments to update one OverviewDifficulty.
     * @example
     * // Update one OverviewDifficulty
     * const overviewDifficulty = await prisma.overviewDifficulty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OverviewDifficultyUpdateArgs>(args: SelectSubset<T, OverviewDifficultyUpdateArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OverviewDifficulties.
     * @param {OverviewDifficultyDeleteManyArgs} args - Arguments to filter OverviewDifficulties to delete.
     * @example
     * // Delete a few OverviewDifficulties
     * const { count } = await prisma.overviewDifficulty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OverviewDifficultyDeleteManyArgs>(args?: SelectSubset<T, OverviewDifficultyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OverviewDifficulties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewDifficultyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OverviewDifficulties
     * const overviewDifficulty = await prisma.overviewDifficulty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OverviewDifficultyUpdateManyArgs>(args: SelectSubset<T, OverviewDifficultyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OverviewDifficulties and returns the data updated in the database.
     * @param {OverviewDifficultyUpdateManyAndReturnArgs} args - Arguments to update many OverviewDifficulties.
     * @example
     * // Update many OverviewDifficulties
     * const overviewDifficulty = await prisma.overviewDifficulty.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OverviewDifficulties and only return the `id`
     * const overviewDifficultyWithIdOnly = await prisma.overviewDifficulty.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OverviewDifficultyUpdateManyAndReturnArgs>(args: SelectSubset<T, OverviewDifficultyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OverviewDifficulty.
     * @param {OverviewDifficultyUpsertArgs} args - Arguments to update or create a OverviewDifficulty.
     * @example
     * // Update or create a OverviewDifficulty
     * const overviewDifficulty = await prisma.overviewDifficulty.upsert({
     *   create: {
     *     // ... data to create a OverviewDifficulty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OverviewDifficulty we want to update
     *   }
     * })
     */
    upsert<T extends OverviewDifficultyUpsertArgs>(args: SelectSubset<T, OverviewDifficultyUpsertArgs<ExtArgs>>): Prisma__OverviewDifficultyClient<$Result.GetResult<Prisma.$OverviewDifficultyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OverviewDifficulties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewDifficultyCountArgs} args - Arguments to filter OverviewDifficulties to count.
     * @example
     * // Count the number of OverviewDifficulties
     * const count = await prisma.overviewDifficulty.count({
     *   where: {
     *     // ... the filter for the OverviewDifficulties we want to count
     *   }
     * })
    **/
    count<T extends OverviewDifficultyCountArgs>(
      args?: Subset<T, OverviewDifficultyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OverviewDifficultyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OverviewDifficulty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewDifficultyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OverviewDifficultyAggregateArgs>(args: Subset<T, OverviewDifficultyAggregateArgs>): Prisma.PrismaPromise<GetOverviewDifficultyAggregateType<T>>

    /**
     * Group by OverviewDifficulty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewDifficultyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OverviewDifficultyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OverviewDifficultyGroupByArgs['orderBy'] }
        : { orderBy?: OverviewDifficultyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OverviewDifficultyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOverviewDifficultyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OverviewDifficulty model
   */
  readonly fields: OverviewDifficultyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OverviewDifficulty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OverviewDifficultyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    guide<T extends GuideDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuideDefaultArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OverviewDifficulty model
   */
  interface OverviewDifficultyFieldRefs {
    readonly id: FieldRef<"OverviewDifficulty", 'Int'>
    readonly spec: FieldRef<"OverviewDifficulty", 'String'>
    readonly mode: FieldRef<"OverviewDifficulty", 'String'>
    readonly singleTarget: FieldRef<"OverviewDifficulty", 'Int'>
    readonly multiTarget: FieldRef<"OverviewDifficulty", 'Int'>
    readonly utility: FieldRef<"OverviewDifficulty", 'Int'>
    readonly survivability: FieldRef<"OverviewDifficulty", 'Int'>
    readonly mobility: FieldRef<"OverviewDifficulty", 'Int'>
    readonly guideId: FieldRef<"OverviewDifficulty", 'Int'>
    readonly createdAt: FieldRef<"OverviewDifficulty", 'DateTime'>
    readonly updatedAt: FieldRef<"OverviewDifficulty", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OverviewDifficulty findUnique
   */
  export type OverviewDifficultyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * Filter, which OverviewDifficulty to fetch.
     */
    where: OverviewDifficultyWhereUniqueInput
  }

  /**
   * OverviewDifficulty findUniqueOrThrow
   */
  export type OverviewDifficultyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * Filter, which OverviewDifficulty to fetch.
     */
    where: OverviewDifficultyWhereUniqueInput
  }

  /**
   * OverviewDifficulty findFirst
   */
  export type OverviewDifficultyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * Filter, which OverviewDifficulty to fetch.
     */
    where?: OverviewDifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverviewDifficulties to fetch.
     */
    orderBy?: OverviewDifficultyOrderByWithRelationInput | OverviewDifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OverviewDifficulties.
     */
    cursor?: OverviewDifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverviewDifficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverviewDifficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OverviewDifficulties.
     */
    distinct?: OverviewDifficultyScalarFieldEnum | OverviewDifficultyScalarFieldEnum[]
  }

  /**
   * OverviewDifficulty findFirstOrThrow
   */
  export type OverviewDifficultyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * Filter, which OverviewDifficulty to fetch.
     */
    where?: OverviewDifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverviewDifficulties to fetch.
     */
    orderBy?: OverviewDifficultyOrderByWithRelationInput | OverviewDifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OverviewDifficulties.
     */
    cursor?: OverviewDifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverviewDifficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverviewDifficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OverviewDifficulties.
     */
    distinct?: OverviewDifficultyScalarFieldEnum | OverviewDifficultyScalarFieldEnum[]
  }

  /**
   * OverviewDifficulty findMany
   */
  export type OverviewDifficultyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * Filter, which OverviewDifficulties to fetch.
     */
    where?: OverviewDifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverviewDifficulties to fetch.
     */
    orderBy?: OverviewDifficultyOrderByWithRelationInput | OverviewDifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OverviewDifficulties.
     */
    cursor?: OverviewDifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverviewDifficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverviewDifficulties.
     */
    skip?: number
    distinct?: OverviewDifficultyScalarFieldEnum | OverviewDifficultyScalarFieldEnum[]
  }

  /**
   * OverviewDifficulty create
   */
  export type OverviewDifficultyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * The data needed to create a OverviewDifficulty.
     */
    data: XOR<OverviewDifficultyCreateInput, OverviewDifficultyUncheckedCreateInput>
  }

  /**
   * OverviewDifficulty createMany
   */
  export type OverviewDifficultyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OverviewDifficulties.
     */
    data: OverviewDifficultyCreateManyInput | OverviewDifficultyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OverviewDifficulty createManyAndReturn
   */
  export type OverviewDifficultyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * The data used to create many OverviewDifficulties.
     */
    data: OverviewDifficultyCreateManyInput | OverviewDifficultyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OverviewDifficulty update
   */
  export type OverviewDifficultyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * The data needed to update a OverviewDifficulty.
     */
    data: XOR<OverviewDifficultyUpdateInput, OverviewDifficultyUncheckedUpdateInput>
    /**
     * Choose, which OverviewDifficulty to update.
     */
    where: OverviewDifficultyWhereUniqueInput
  }

  /**
   * OverviewDifficulty updateMany
   */
  export type OverviewDifficultyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OverviewDifficulties.
     */
    data: XOR<OverviewDifficultyUpdateManyMutationInput, OverviewDifficultyUncheckedUpdateManyInput>
    /**
     * Filter which OverviewDifficulties to update
     */
    where?: OverviewDifficultyWhereInput
    /**
     * Limit how many OverviewDifficulties to update.
     */
    limit?: number
  }

  /**
   * OverviewDifficulty updateManyAndReturn
   */
  export type OverviewDifficultyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * The data used to update OverviewDifficulties.
     */
    data: XOR<OverviewDifficultyUpdateManyMutationInput, OverviewDifficultyUncheckedUpdateManyInput>
    /**
     * Filter which OverviewDifficulties to update
     */
    where?: OverviewDifficultyWhereInput
    /**
     * Limit how many OverviewDifficulties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OverviewDifficulty upsert
   */
  export type OverviewDifficultyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * The filter to search for the OverviewDifficulty to update in case it exists.
     */
    where: OverviewDifficultyWhereUniqueInput
    /**
     * In case the OverviewDifficulty found by the `where` argument doesn't exist, create a new OverviewDifficulty with this data.
     */
    create: XOR<OverviewDifficultyCreateInput, OverviewDifficultyUncheckedCreateInput>
    /**
     * In case the OverviewDifficulty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OverviewDifficultyUpdateInput, OverviewDifficultyUncheckedUpdateInput>
  }

  /**
   * OverviewDifficulty delete
   */
  export type OverviewDifficultyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
    /**
     * Filter which OverviewDifficulty to delete.
     */
    where: OverviewDifficultyWhereUniqueInput
  }

  /**
   * OverviewDifficulty deleteMany
   */
  export type OverviewDifficultyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OverviewDifficulties to delete
     */
    where?: OverviewDifficultyWhereInput
    /**
     * Limit how many OverviewDifficulties to delete.
     */
    limit?: number
  }

  /**
   * OverviewDifficulty without action
   */
  export type OverviewDifficultyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverviewDifficulty
     */
    select?: OverviewDifficultySelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverviewDifficulty
     */
    omit?: OverviewDifficultyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverviewDifficultyInclude<ExtArgs> | null
  }


  /**
   * Model HeroTalents
   */

  export type AggregateHeroTalents = {
    _count: HeroTalentsCountAggregateOutputType | null
    _avg: HeroTalentsAvgAggregateOutputType | null
    _sum: HeroTalentsSumAggregateOutputType | null
    _min: HeroTalentsMinAggregateOutputType | null
    _max: HeroTalentsMaxAggregateOutputType | null
  }

  export type HeroTalentsAvgAggregateOutputType = {
    id: number | null
    guideId: number | null
  }

  export type HeroTalentsSumAggregateOutputType = {
    id: number | null
    guideId: number | null
  }

  export type HeroTalentsMinAggregateOutputType = {
    id: number | null
    guideId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HeroTalentsMaxAggregateOutputType = {
    id: number | null
    guideId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HeroTalentsCountAggregateOutputType = {
    id: number
    guideId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HeroTalentsAvgAggregateInputType = {
    id?: true
    guideId?: true
  }

  export type HeroTalentsSumAggregateInputType = {
    id?: true
    guideId?: true
  }

  export type HeroTalentsMinAggregateInputType = {
    id?: true
    guideId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HeroTalentsMaxAggregateInputType = {
    id?: true
    guideId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HeroTalentsCountAggregateInputType = {
    id?: true
    guideId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HeroTalentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeroTalents to aggregate.
     */
    where?: HeroTalentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroTalents to fetch.
     */
    orderBy?: HeroTalentsOrderByWithRelationInput | HeroTalentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HeroTalentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroTalents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroTalents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HeroTalents
    **/
    _count?: true | HeroTalentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HeroTalentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HeroTalentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HeroTalentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HeroTalentsMaxAggregateInputType
  }

  export type GetHeroTalentsAggregateType<T extends HeroTalentsAggregateArgs> = {
        [P in keyof T & keyof AggregateHeroTalents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHeroTalents[P]>
      : GetScalarType<T[P], AggregateHeroTalents[P]>
  }




  export type HeroTalentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HeroTalentsWhereInput
    orderBy?: HeroTalentsOrderByWithAggregationInput | HeroTalentsOrderByWithAggregationInput[]
    by: HeroTalentsScalarFieldEnum[] | HeroTalentsScalarFieldEnum
    having?: HeroTalentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HeroTalentsCountAggregateInputType | true
    _avg?: HeroTalentsAvgAggregateInputType
    _sum?: HeroTalentsSumAggregateInputType
    _min?: HeroTalentsMinAggregateInputType
    _max?: HeroTalentsMaxAggregateInputType
  }

  export type HeroTalentsGroupByOutputType = {
    id: number
    guideId: number
    createdAt: Date
    updatedAt: Date
    _count: HeroTalentsCountAggregateOutputType | null
    _avg: HeroTalentsAvgAggregateOutputType | null
    _sum: HeroTalentsSumAggregateOutputType | null
    _min: HeroTalentsMinAggregateOutputType | null
    _max: HeroTalentsMaxAggregateOutputType | null
  }

  type GetHeroTalentsGroupByPayload<T extends HeroTalentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HeroTalentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HeroTalentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HeroTalentsGroupByOutputType[P]>
            : GetScalarType<T[P], HeroTalentsGroupByOutputType[P]>
        }
      >
    >


  export type HeroTalentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guide?: boolean | GuideDefaultArgs<ExtArgs>
    tabs?: boolean | HeroTalents$tabsArgs<ExtArgs>
    _count?: boolean | HeroTalentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heroTalents"]>

  export type HeroTalentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heroTalents"]>

  export type HeroTalentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heroTalents"]>

  export type HeroTalentsSelectScalar = {
    id?: boolean
    guideId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HeroTalentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "guideId" | "createdAt" | "updatedAt", ExtArgs["result"]["heroTalents"]>
  export type HeroTalentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guide?: boolean | GuideDefaultArgs<ExtArgs>
    tabs?: boolean | HeroTalents$tabsArgs<ExtArgs>
    _count?: boolean | HeroTalentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HeroTalentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }
  export type HeroTalentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guide?: boolean | GuideDefaultArgs<ExtArgs>
  }

  export type $HeroTalentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HeroTalents"
    objects: {
      guide: Prisma.$GuidePayload<ExtArgs>
      tabs: Prisma.$TabPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      guideId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["heroTalents"]>
    composites: {}
  }

  type HeroTalentsGetPayload<S extends boolean | null | undefined | HeroTalentsDefaultArgs> = $Result.GetResult<Prisma.$HeroTalentsPayload, S>

  type HeroTalentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HeroTalentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HeroTalentsCountAggregateInputType | true
    }

  export interface HeroTalentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HeroTalents'], meta: { name: 'HeroTalents' } }
    /**
     * Find zero or one HeroTalents that matches the filter.
     * @param {HeroTalentsFindUniqueArgs} args - Arguments to find a HeroTalents
     * @example
     * // Get one HeroTalents
     * const heroTalents = await prisma.heroTalents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HeroTalentsFindUniqueArgs>(args: SelectSubset<T, HeroTalentsFindUniqueArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HeroTalents that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HeroTalentsFindUniqueOrThrowArgs} args - Arguments to find a HeroTalents
     * @example
     * // Get one HeroTalents
     * const heroTalents = await prisma.heroTalents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HeroTalentsFindUniqueOrThrowArgs>(args: SelectSubset<T, HeroTalentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeroTalents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroTalentsFindFirstArgs} args - Arguments to find a HeroTalents
     * @example
     * // Get one HeroTalents
     * const heroTalents = await prisma.heroTalents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HeroTalentsFindFirstArgs>(args?: SelectSubset<T, HeroTalentsFindFirstArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeroTalents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroTalentsFindFirstOrThrowArgs} args - Arguments to find a HeroTalents
     * @example
     * // Get one HeroTalents
     * const heroTalents = await prisma.heroTalents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HeroTalentsFindFirstOrThrowArgs>(args?: SelectSubset<T, HeroTalentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HeroTalents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroTalentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HeroTalents
     * const heroTalents = await prisma.heroTalents.findMany()
     * 
     * // Get first 10 HeroTalents
     * const heroTalents = await prisma.heroTalents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const heroTalentsWithIdOnly = await prisma.heroTalents.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HeroTalentsFindManyArgs>(args?: SelectSubset<T, HeroTalentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HeroTalents.
     * @param {HeroTalentsCreateArgs} args - Arguments to create a HeroTalents.
     * @example
     * // Create one HeroTalents
     * const HeroTalents = await prisma.heroTalents.create({
     *   data: {
     *     // ... data to create a HeroTalents
     *   }
     * })
     * 
     */
    create<T extends HeroTalentsCreateArgs>(args: SelectSubset<T, HeroTalentsCreateArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HeroTalents.
     * @param {HeroTalentsCreateManyArgs} args - Arguments to create many HeroTalents.
     * @example
     * // Create many HeroTalents
     * const heroTalents = await prisma.heroTalents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HeroTalentsCreateManyArgs>(args?: SelectSubset<T, HeroTalentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HeroTalents and returns the data saved in the database.
     * @param {HeroTalentsCreateManyAndReturnArgs} args - Arguments to create many HeroTalents.
     * @example
     * // Create many HeroTalents
     * const heroTalents = await prisma.heroTalents.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HeroTalents and only return the `id`
     * const heroTalentsWithIdOnly = await prisma.heroTalents.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HeroTalentsCreateManyAndReturnArgs>(args?: SelectSubset<T, HeroTalentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HeroTalents.
     * @param {HeroTalentsDeleteArgs} args - Arguments to delete one HeroTalents.
     * @example
     * // Delete one HeroTalents
     * const HeroTalents = await prisma.heroTalents.delete({
     *   where: {
     *     // ... filter to delete one HeroTalents
     *   }
     * })
     * 
     */
    delete<T extends HeroTalentsDeleteArgs>(args: SelectSubset<T, HeroTalentsDeleteArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HeroTalents.
     * @param {HeroTalentsUpdateArgs} args - Arguments to update one HeroTalents.
     * @example
     * // Update one HeroTalents
     * const heroTalents = await prisma.heroTalents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HeroTalentsUpdateArgs>(args: SelectSubset<T, HeroTalentsUpdateArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HeroTalents.
     * @param {HeroTalentsDeleteManyArgs} args - Arguments to filter HeroTalents to delete.
     * @example
     * // Delete a few HeroTalents
     * const { count } = await prisma.heroTalents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HeroTalentsDeleteManyArgs>(args?: SelectSubset<T, HeroTalentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HeroTalents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroTalentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HeroTalents
     * const heroTalents = await prisma.heroTalents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HeroTalentsUpdateManyArgs>(args: SelectSubset<T, HeroTalentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HeroTalents and returns the data updated in the database.
     * @param {HeroTalentsUpdateManyAndReturnArgs} args - Arguments to update many HeroTalents.
     * @example
     * // Update many HeroTalents
     * const heroTalents = await prisma.heroTalents.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HeroTalents and only return the `id`
     * const heroTalentsWithIdOnly = await prisma.heroTalents.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HeroTalentsUpdateManyAndReturnArgs>(args: SelectSubset<T, HeroTalentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HeroTalents.
     * @param {HeroTalentsUpsertArgs} args - Arguments to update or create a HeroTalents.
     * @example
     * // Update or create a HeroTalents
     * const heroTalents = await prisma.heroTalents.upsert({
     *   create: {
     *     // ... data to create a HeroTalents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HeroTalents we want to update
     *   }
     * })
     */
    upsert<T extends HeroTalentsUpsertArgs>(args: SelectSubset<T, HeroTalentsUpsertArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HeroTalents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroTalentsCountArgs} args - Arguments to filter HeroTalents to count.
     * @example
     * // Count the number of HeroTalents
     * const count = await prisma.heroTalents.count({
     *   where: {
     *     // ... the filter for the HeroTalents we want to count
     *   }
     * })
    **/
    count<T extends HeroTalentsCountArgs>(
      args?: Subset<T, HeroTalentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HeroTalentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HeroTalents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroTalentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HeroTalentsAggregateArgs>(args: Subset<T, HeroTalentsAggregateArgs>): Prisma.PrismaPromise<GetHeroTalentsAggregateType<T>>

    /**
     * Group by HeroTalents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroTalentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HeroTalentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HeroTalentsGroupByArgs['orderBy'] }
        : { orderBy?: HeroTalentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HeroTalentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHeroTalentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HeroTalents model
   */
  readonly fields: HeroTalentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HeroTalents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HeroTalentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    guide<T extends GuideDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuideDefaultArgs<ExtArgs>>): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tabs<T extends HeroTalents$tabsArgs<ExtArgs> = {}>(args?: Subset<T, HeroTalents$tabsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HeroTalents model
   */
  interface HeroTalentsFieldRefs {
    readonly id: FieldRef<"HeroTalents", 'Int'>
    readonly guideId: FieldRef<"HeroTalents", 'Int'>
    readonly createdAt: FieldRef<"HeroTalents", 'DateTime'>
    readonly updatedAt: FieldRef<"HeroTalents", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HeroTalents findUnique
   */
  export type HeroTalentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * Filter, which HeroTalents to fetch.
     */
    where: HeroTalentsWhereUniqueInput
  }

  /**
   * HeroTalents findUniqueOrThrow
   */
  export type HeroTalentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * Filter, which HeroTalents to fetch.
     */
    where: HeroTalentsWhereUniqueInput
  }

  /**
   * HeroTalents findFirst
   */
  export type HeroTalentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * Filter, which HeroTalents to fetch.
     */
    where?: HeroTalentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroTalents to fetch.
     */
    orderBy?: HeroTalentsOrderByWithRelationInput | HeroTalentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeroTalents.
     */
    cursor?: HeroTalentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroTalents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroTalents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeroTalents.
     */
    distinct?: HeroTalentsScalarFieldEnum | HeroTalentsScalarFieldEnum[]
  }

  /**
   * HeroTalents findFirstOrThrow
   */
  export type HeroTalentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * Filter, which HeroTalents to fetch.
     */
    where?: HeroTalentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroTalents to fetch.
     */
    orderBy?: HeroTalentsOrderByWithRelationInput | HeroTalentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeroTalents.
     */
    cursor?: HeroTalentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroTalents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroTalents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeroTalents.
     */
    distinct?: HeroTalentsScalarFieldEnum | HeroTalentsScalarFieldEnum[]
  }

  /**
   * HeroTalents findMany
   */
  export type HeroTalentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * Filter, which HeroTalents to fetch.
     */
    where?: HeroTalentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroTalents to fetch.
     */
    orderBy?: HeroTalentsOrderByWithRelationInput | HeroTalentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HeroTalents.
     */
    cursor?: HeroTalentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroTalents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroTalents.
     */
    skip?: number
    distinct?: HeroTalentsScalarFieldEnum | HeroTalentsScalarFieldEnum[]
  }

  /**
   * HeroTalents create
   */
  export type HeroTalentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * The data needed to create a HeroTalents.
     */
    data: XOR<HeroTalentsCreateInput, HeroTalentsUncheckedCreateInput>
  }

  /**
   * HeroTalents createMany
   */
  export type HeroTalentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HeroTalents.
     */
    data: HeroTalentsCreateManyInput | HeroTalentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HeroTalents createManyAndReturn
   */
  export type HeroTalentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * The data used to create many HeroTalents.
     */
    data: HeroTalentsCreateManyInput | HeroTalentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HeroTalents update
   */
  export type HeroTalentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * The data needed to update a HeroTalents.
     */
    data: XOR<HeroTalentsUpdateInput, HeroTalentsUncheckedUpdateInput>
    /**
     * Choose, which HeroTalents to update.
     */
    where: HeroTalentsWhereUniqueInput
  }

  /**
   * HeroTalents updateMany
   */
  export type HeroTalentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HeroTalents.
     */
    data: XOR<HeroTalentsUpdateManyMutationInput, HeroTalentsUncheckedUpdateManyInput>
    /**
     * Filter which HeroTalents to update
     */
    where?: HeroTalentsWhereInput
    /**
     * Limit how many HeroTalents to update.
     */
    limit?: number
  }

  /**
   * HeroTalents updateManyAndReturn
   */
  export type HeroTalentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * The data used to update HeroTalents.
     */
    data: XOR<HeroTalentsUpdateManyMutationInput, HeroTalentsUncheckedUpdateManyInput>
    /**
     * Filter which HeroTalents to update
     */
    where?: HeroTalentsWhereInput
    /**
     * Limit how many HeroTalents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HeroTalents upsert
   */
  export type HeroTalentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * The filter to search for the HeroTalents to update in case it exists.
     */
    where: HeroTalentsWhereUniqueInput
    /**
     * In case the HeroTalents found by the `where` argument doesn't exist, create a new HeroTalents with this data.
     */
    create: XOR<HeroTalentsCreateInput, HeroTalentsUncheckedCreateInput>
    /**
     * In case the HeroTalents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HeroTalentsUpdateInput, HeroTalentsUncheckedUpdateInput>
  }

  /**
   * HeroTalents delete
   */
  export type HeroTalentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
    /**
     * Filter which HeroTalents to delete.
     */
    where: HeroTalentsWhereUniqueInput
  }

  /**
   * HeroTalents deleteMany
   */
  export type HeroTalentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeroTalents to delete
     */
    where?: HeroTalentsWhereInput
    /**
     * Limit how many HeroTalents to delete.
     */
    limit?: number
  }

  /**
   * HeroTalents.tabs
   */
  export type HeroTalents$tabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    where?: TabWhereInput
    orderBy?: TabOrderByWithRelationInput | TabOrderByWithRelationInput[]
    cursor?: TabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TabScalarFieldEnum | TabScalarFieldEnum[]
  }

  /**
   * HeroTalents without action
   */
  export type HeroTalentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroTalents
     */
    select?: HeroTalentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroTalents
     */
    omit?: HeroTalentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeroTalentsInclude<ExtArgs> | null
  }


  /**
   * Model Tab
   */

  export type AggregateTab = {
    _count: TabCountAggregateOutputType | null
    _avg: TabAvgAggregateOutputType | null
    _sum: TabSumAggregateOutputType | null
    _min: TabMinAggregateOutputType | null
    _max: TabMaxAggregateOutputType | null
  }

  export type TabAvgAggregateOutputType = {
    id: number | null
    heroTalentsId: number | null
  }

  export type TabSumAggregateOutputType = {
    id: number | null
    heroTalentsId: number | null
  }

  export type TabMinAggregateOutputType = {
    id: number | null
    value: string | null
    label: string | null
    iconUrl: string | null
    content: string | null
    heroTalentsId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TabMaxAggregateOutputType = {
    id: number | null
    value: string | null
    label: string | null
    iconUrl: string | null
    content: string | null
    heroTalentsId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TabCountAggregateOutputType = {
    id: number
    value: number
    label: number
    iconUrl: number
    content: number
    heroTalentsId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TabAvgAggregateInputType = {
    id?: true
    heroTalentsId?: true
  }

  export type TabSumAggregateInputType = {
    id?: true
    heroTalentsId?: true
  }

  export type TabMinAggregateInputType = {
    id?: true
    value?: true
    label?: true
    iconUrl?: true
    content?: true
    heroTalentsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TabMaxAggregateInputType = {
    id?: true
    value?: true
    label?: true
    iconUrl?: true
    content?: true
    heroTalentsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TabCountAggregateInputType = {
    id?: true
    value?: true
    label?: true
    iconUrl?: true
    content?: true
    heroTalentsId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TabAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tab to aggregate.
     */
    where?: TabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tabs to fetch.
     */
    orderBy?: TabOrderByWithRelationInput | TabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tabs
    **/
    _count?: true | TabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TabAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TabSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TabMaxAggregateInputType
  }

  export type GetTabAggregateType<T extends TabAggregateArgs> = {
        [P in keyof T & keyof AggregateTab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTab[P]>
      : GetScalarType<T[P], AggregateTab[P]>
  }




  export type TabGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TabWhereInput
    orderBy?: TabOrderByWithAggregationInput | TabOrderByWithAggregationInput[]
    by: TabScalarFieldEnum[] | TabScalarFieldEnum
    having?: TabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TabCountAggregateInputType | true
    _avg?: TabAvgAggregateInputType
    _sum?: TabSumAggregateInputType
    _min?: TabMinAggregateInputType
    _max?: TabMaxAggregateInputType
  }

  export type TabGroupByOutputType = {
    id: number
    value: string
    label: string
    iconUrl: string | null
    content: string
    heroTalentsId: number
    createdAt: Date
    updatedAt: Date
    _count: TabCountAggregateOutputType | null
    _avg: TabAvgAggregateOutputType | null
    _sum: TabSumAggregateOutputType | null
    _min: TabMinAggregateOutputType | null
    _max: TabMaxAggregateOutputType | null
  }

  type GetTabGroupByPayload<T extends TabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TabGroupByOutputType[P]>
            : GetScalarType<T[P], TabGroupByOutputType[P]>
        }
      >
    >


  export type TabSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    label?: boolean
    iconUrl?: boolean
    content?: boolean
    heroTalentsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    heroTalents?: boolean | HeroTalentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tab"]>

  export type TabSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    label?: boolean
    iconUrl?: boolean
    content?: boolean
    heroTalentsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    heroTalents?: boolean | HeroTalentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tab"]>

  export type TabSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    label?: boolean
    iconUrl?: boolean
    content?: boolean
    heroTalentsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    heroTalents?: boolean | HeroTalentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tab"]>

  export type TabSelectScalar = {
    id?: boolean
    value?: boolean
    label?: boolean
    iconUrl?: boolean
    content?: boolean
    heroTalentsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TabOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "label" | "iconUrl" | "content" | "heroTalentsId" | "createdAt" | "updatedAt", ExtArgs["result"]["tab"]>
  export type TabInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    heroTalents?: boolean | HeroTalentsDefaultArgs<ExtArgs>
  }
  export type TabIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    heroTalents?: boolean | HeroTalentsDefaultArgs<ExtArgs>
  }
  export type TabIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    heroTalents?: boolean | HeroTalentsDefaultArgs<ExtArgs>
  }

  export type $TabPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tab"
    objects: {
      heroTalents: Prisma.$HeroTalentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      value: string
      label: string
      iconUrl: string | null
      content: string
      heroTalentsId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tab"]>
    composites: {}
  }

  type TabGetPayload<S extends boolean | null | undefined | TabDefaultArgs> = $Result.GetResult<Prisma.$TabPayload, S>

  type TabCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TabFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TabCountAggregateInputType | true
    }

  export interface TabDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tab'], meta: { name: 'Tab' } }
    /**
     * Find zero or one Tab that matches the filter.
     * @param {TabFindUniqueArgs} args - Arguments to find a Tab
     * @example
     * // Get one Tab
     * const tab = await prisma.tab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TabFindUniqueArgs>(args: SelectSubset<T, TabFindUniqueArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tab that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TabFindUniqueOrThrowArgs} args - Arguments to find a Tab
     * @example
     * // Get one Tab
     * const tab = await prisma.tab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TabFindUniqueOrThrowArgs>(args: SelectSubset<T, TabFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TabFindFirstArgs} args - Arguments to find a Tab
     * @example
     * // Get one Tab
     * const tab = await prisma.tab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TabFindFirstArgs>(args?: SelectSubset<T, TabFindFirstArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tab that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TabFindFirstOrThrowArgs} args - Arguments to find a Tab
     * @example
     * // Get one Tab
     * const tab = await prisma.tab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TabFindFirstOrThrowArgs>(args?: SelectSubset<T, TabFindFirstOrThrowArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TabFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tabs
     * const tabs = await prisma.tab.findMany()
     * 
     * // Get first 10 Tabs
     * const tabs = await prisma.tab.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tabWithIdOnly = await prisma.tab.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TabFindManyArgs>(args?: SelectSubset<T, TabFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tab.
     * @param {TabCreateArgs} args - Arguments to create a Tab.
     * @example
     * // Create one Tab
     * const Tab = await prisma.tab.create({
     *   data: {
     *     // ... data to create a Tab
     *   }
     * })
     * 
     */
    create<T extends TabCreateArgs>(args: SelectSubset<T, TabCreateArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tabs.
     * @param {TabCreateManyArgs} args - Arguments to create many Tabs.
     * @example
     * // Create many Tabs
     * const tab = await prisma.tab.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TabCreateManyArgs>(args?: SelectSubset<T, TabCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tabs and returns the data saved in the database.
     * @param {TabCreateManyAndReturnArgs} args - Arguments to create many Tabs.
     * @example
     * // Create many Tabs
     * const tab = await prisma.tab.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tabs and only return the `id`
     * const tabWithIdOnly = await prisma.tab.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TabCreateManyAndReturnArgs>(args?: SelectSubset<T, TabCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tab.
     * @param {TabDeleteArgs} args - Arguments to delete one Tab.
     * @example
     * // Delete one Tab
     * const Tab = await prisma.tab.delete({
     *   where: {
     *     // ... filter to delete one Tab
     *   }
     * })
     * 
     */
    delete<T extends TabDeleteArgs>(args: SelectSubset<T, TabDeleteArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tab.
     * @param {TabUpdateArgs} args - Arguments to update one Tab.
     * @example
     * // Update one Tab
     * const tab = await prisma.tab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TabUpdateArgs>(args: SelectSubset<T, TabUpdateArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tabs.
     * @param {TabDeleteManyArgs} args - Arguments to filter Tabs to delete.
     * @example
     * // Delete a few Tabs
     * const { count } = await prisma.tab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TabDeleteManyArgs>(args?: SelectSubset<T, TabDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tabs
     * const tab = await prisma.tab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TabUpdateManyArgs>(args: SelectSubset<T, TabUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tabs and returns the data updated in the database.
     * @param {TabUpdateManyAndReturnArgs} args - Arguments to update many Tabs.
     * @example
     * // Update many Tabs
     * const tab = await prisma.tab.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tabs and only return the `id`
     * const tabWithIdOnly = await prisma.tab.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TabUpdateManyAndReturnArgs>(args: SelectSubset<T, TabUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tab.
     * @param {TabUpsertArgs} args - Arguments to update or create a Tab.
     * @example
     * // Update or create a Tab
     * const tab = await prisma.tab.upsert({
     *   create: {
     *     // ... data to create a Tab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tab we want to update
     *   }
     * })
     */
    upsert<T extends TabUpsertArgs>(args: SelectSubset<T, TabUpsertArgs<ExtArgs>>): Prisma__TabClient<$Result.GetResult<Prisma.$TabPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TabCountArgs} args - Arguments to filter Tabs to count.
     * @example
     * // Count the number of Tabs
     * const count = await prisma.tab.count({
     *   where: {
     *     // ... the filter for the Tabs we want to count
     *   }
     * })
    **/
    count<T extends TabCountArgs>(
      args?: Subset<T, TabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TabAggregateArgs>(args: Subset<T, TabAggregateArgs>): Prisma.PrismaPromise<GetTabAggregateType<T>>

    /**
     * Group by Tab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TabGroupByArgs['orderBy'] }
        : { orderBy?: TabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tab model
   */
  readonly fields: TabFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TabClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    heroTalents<T extends HeroTalentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HeroTalentsDefaultArgs<ExtArgs>>): Prisma__HeroTalentsClient<$Result.GetResult<Prisma.$HeroTalentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tab model
   */
  interface TabFieldRefs {
    readonly id: FieldRef<"Tab", 'Int'>
    readonly value: FieldRef<"Tab", 'String'>
    readonly label: FieldRef<"Tab", 'String'>
    readonly iconUrl: FieldRef<"Tab", 'String'>
    readonly content: FieldRef<"Tab", 'String'>
    readonly heroTalentsId: FieldRef<"Tab", 'Int'>
    readonly createdAt: FieldRef<"Tab", 'DateTime'>
    readonly updatedAt: FieldRef<"Tab", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tab findUnique
   */
  export type TabFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * Filter, which Tab to fetch.
     */
    where: TabWhereUniqueInput
  }

  /**
   * Tab findUniqueOrThrow
   */
  export type TabFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * Filter, which Tab to fetch.
     */
    where: TabWhereUniqueInput
  }

  /**
   * Tab findFirst
   */
  export type TabFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * Filter, which Tab to fetch.
     */
    where?: TabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tabs to fetch.
     */
    orderBy?: TabOrderByWithRelationInput | TabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tabs.
     */
    cursor?: TabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tabs.
     */
    distinct?: TabScalarFieldEnum | TabScalarFieldEnum[]
  }

  /**
   * Tab findFirstOrThrow
   */
  export type TabFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * Filter, which Tab to fetch.
     */
    where?: TabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tabs to fetch.
     */
    orderBy?: TabOrderByWithRelationInput | TabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tabs.
     */
    cursor?: TabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tabs.
     */
    distinct?: TabScalarFieldEnum | TabScalarFieldEnum[]
  }

  /**
   * Tab findMany
   */
  export type TabFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * Filter, which Tabs to fetch.
     */
    where?: TabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tabs to fetch.
     */
    orderBy?: TabOrderByWithRelationInput | TabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tabs.
     */
    cursor?: TabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tabs.
     */
    skip?: number
    distinct?: TabScalarFieldEnum | TabScalarFieldEnum[]
  }

  /**
   * Tab create
   */
  export type TabCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * The data needed to create a Tab.
     */
    data: XOR<TabCreateInput, TabUncheckedCreateInput>
  }

  /**
   * Tab createMany
   */
  export type TabCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tabs.
     */
    data: TabCreateManyInput | TabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tab createManyAndReturn
   */
  export type TabCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * The data used to create many Tabs.
     */
    data: TabCreateManyInput | TabCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tab update
   */
  export type TabUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * The data needed to update a Tab.
     */
    data: XOR<TabUpdateInput, TabUncheckedUpdateInput>
    /**
     * Choose, which Tab to update.
     */
    where: TabWhereUniqueInput
  }

  /**
   * Tab updateMany
   */
  export type TabUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tabs.
     */
    data: XOR<TabUpdateManyMutationInput, TabUncheckedUpdateManyInput>
    /**
     * Filter which Tabs to update
     */
    where?: TabWhereInput
    /**
     * Limit how many Tabs to update.
     */
    limit?: number
  }

  /**
   * Tab updateManyAndReturn
   */
  export type TabUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * The data used to update Tabs.
     */
    data: XOR<TabUpdateManyMutationInput, TabUncheckedUpdateManyInput>
    /**
     * Filter which Tabs to update
     */
    where?: TabWhereInput
    /**
     * Limit how many Tabs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tab upsert
   */
  export type TabUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * The filter to search for the Tab to update in case it exists.
     */
    where: TabWhereUniqueInput
    /**
     * In case the Tab found by the `where` argument doesn't exist, create a new Tab with this data.
     */
    create: XOR<TabCreateInput, TabUncheckedCreateInput>
    /**
     * In case the Tab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TabUpdateInput, TabUncheckedUpdateInput>
  }

  /**
   * Tab delete
   */
  export type TabDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
    /**
     * Filter which Tab to delete.
     */
    where: TabWhereUniqueInput
  }

  /**
   * Tab deleteMany
   */
  export type TabDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tabs to delete
     */
    where?: TabWhereInput
    /**
     * Limit how many Tabs to delete.
     */
    limit?: number
  }

  /**
   * Tab without action
   */
  export type TabDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tab
     */
    select?: TabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tab
     */
    omit?: TabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TabInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    role: 'role',
    provider: 'provider',
    providerId: 'providerId',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GuideScalarFieldEnum: {
    id: 'id',
    spec: 'spec',
    mode: 'mode',
    title: 'title',
    patch: 'patch',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GuideScalarFieldEnum = (typeof GuideScalarFieldEnum)[keyof typeof GuideScalarFieldEnum]


  export const OverviewDifficultyScalarFieldEnum: {
    id: 'id',
    spec: 'spec',
    mode: 'mode',
    singleTarget: 'singleTarget',
    multiTarget: 'multiTarget',
    utility: 'utility',
    survivability: 'survivability',
    mobility: 'mobility',
    guideId: 'guideId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OverviewDifficultyScalarFieldEnum = (typeof OverviewDifficultyScalarFieldEnum)[keyof typeof OverviewDifficultyScalarFieldEnum]


  export const HeroTalentsScalarFieldEnum: {
    id: 'id',
    guideId: 'guideId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HeroTalentsScalarFieldEnum = (typeof HeroTalentsScalarFieldEnum)[keyof typeof HeroTalentsScalarFieldEnum]


  export const TabScalarFieldEnum: {
    id: 'id',
    value: 'value',
    label: 'label',
    iconUrl: 'iconUrl',
    content: 'content',
    heroTalentsId: 'heroTalentsId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TabScalarFieldEnum = (typeof TabScalarFieldEnum)[keyof typeof TabScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    provider?: StringNullableFilter<"User"> | string | null
    providerId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    provider?: StringNullableFilter<"User"> | string | null
    providerId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    fullName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    provider?: StringNullableWithAggregatesFilter<"User"> | string | null
    providerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type GuideWhereInput = {
    AND?: GuideWhereInput | GuideWhereInput[]
    OR?: GuideWhereInput[]
    NOT?: GuideWhereInput | GuideWhereInput[]
    id?: IntFilter<"Guide"> | number
    spec?: StringFilter<"Guide"> | string
    mode?: StringFilter<"Guide"> | string
    title?: StringNullableFilter<"Guide"> | string | null
    patch?: StringNullableFilter<"Guide"> | string | null
    createdAt?: DateTimeFilter<"Guide"> | Date | string
    updatedAt?: DateTimeFilter<"Guide"> | Date | string
    overviewDifficulty?: XOR<OverviewDifficultyNullableScalarRelationFilter, OverviewDifficultyWhereInput> | null
    heroTalents?: XOR<HeroTalentsNullableScalarRelationFilter, HeroTalentsWhereInput> | null
  }

  export type GuideOrderByWithRelationInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    title?: SortOrderInput | SortOrder
    patch?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    overviewDifficulty?: OverviewDifficultyOrderByWithRelationInput
    heroTalents?: HeroTalentsOrderByWithRelationInput
  }

  export type GuideWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GuideWhereInput | GuideWhereInput[]
    OR?: GuideWhereInput[]
    NOT?: GuideWhereInput | GuideWhereInput[]
    spec?: StringFilter<"Guide"> | string
    mode?: StringFilter<"Guide"> | string
    title?: StringNullableFilter<"Guide"> | string | null
    patch?: StringNullableFilter<"Guide"> | string | null
    createdAt?: DateTimeFilter<"Guide"> | Date | string
    updatedAt?: DateTimeFilter<"Guide"> | Date | string
    overviewDifficulty?: XOR<OverviewDifficultyNullableScalarRelationFilter, OverviewDifficultyWhereInput> | null
    heroTalents?: XOR<HeroTalentsNullableScalarRelationFilter, HeroTalentsWhereInput> | null
  }, "id">

  export type GuideOrderByWithAggregationInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    title?: SortOrderInput | SortOrder
    patch?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GuideCountOrderByAggregateInput
    _avg?: GuideAvgOrderByAggregateInput
    _max?: GuideMaxOrderByAggregateInput
    _min?: GuideMinOrderByAggregateInput
    _sum?: GuideSumOrderByAggregateInput
  }

  export type GuideScalarWhereWithAggregatesInput = {
    AND?: GuideScalarWhereWithAggregatesInput | GuideScalarWhereWithAggregatesInput[]
    OR?: GuideScalarWhereWithAggregatesInput[]
    NOT?: GuideScalarWhereWithAggregatesInput | GuideScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Guide"> | number
    spec?: StringWithAggregatesFilter<"Guide"> | string
    mode?: StringWithAggregatesFilter<"Guide"> | string
    title?: StringNullableWithAggregatesFilter<"Guide"> | string | null
    patch?: StringNullableWithAggregatesFilter<"Guide"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Guide"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Guide"> | Date | string
  }

  export type OverviewDifficultyWhereInput = {
    AND?: OverviewDifficultyWhereInput | OverviewDifficultyWhereInput[]
    OR?: OverviewDifficultyWhereInput[]
    NOT?: OverviewDifficultyWhereInput | OverviewDifficultyWhereInput[]
    id?: IntFilter<"OverviewDifficulty"> | number
    spec?: StringFilter<"OverviewDifficulty"> | string
    mode?: StringFilter<"OverviewDifficulty"> | string
    singleTarget?: IntFilter<"OverviewDifficulty"> | number
    multiTarget?: IntFilter<"OverviewDifficulty"> | number
    utility?: IntFilter<"OverviewDifficulty"> | number
    survivability?: IntFilter<"OverviewDifficulty"> | number
    mobility?: IntFilter<"OverviewDifficulty"> | number
    guideId?: IntFilter<"OverviewDifficulty"> | number
    createdAt?: DateTimeFilter<"OverviewDifficulty"> | Date | string
    updatedAt?: DateTimeFilter<"OverviewDifficulty"> | Date | string
    guide?: XOR<GuideScalarRelationFilter, GuideWhereInput>
  }

  export type OverviewDifficultyOrderByWithRelationInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    singleTarget?: SortOrder
    multiTarget?: SortOrder
    utility?: SortOrder
    survivability?: SortOrder
    mobility?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guide?: GuideOrderByWithRelationInput
  }

  export type OverviewDifficultyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    guideId?: number
    AND?: OverviewDifficultyWhereInput | OverviewDifficultyWhereInput[]
    OR?: OverviewDifficultyWhereInput[]
    NOT?: OverviewDifficultyWhereInput | OverviewDifficultyWhereInput[]
    spec?: StringFilter<"OverviewDifficulty"> | string
    mode?: StringFilter<"OverviewDifficulty"> | string
    singleTarget?: IntFilter<"OverviewDifficulty"> | number
    multiTarget?: IntFilter<"OverviewDifficulty"> | number
    utility?: IntFilter<"OverviewDifficulty"> | number
    survivability?: IntFilter<"OverviewDifficulty"> | number
    mobility?: IntFilter<"OverviewDifficulty"> | number
    createdAt?: DateTimeFilter<"OverviewDifficulty"> | Date | string
    updatedAt?: DateTimeFilter<"OverviewDifficulty"> | Date | string
    guide?: XOR<GuideScalarRelationFilter, GuideWhereInput>
  }, "id" | "guideId">

  export type OverviewDifficultyOrderByWithAggregationInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    singleTarget?: SortOrder
    multiTarget?: SortOrder
    utility?: SortOrder
    survivability?: SortOrder
    mobility?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OverviewDifficultyCountOrderByAggregateInput
    _avg?: OverviewDifficultyAvgOrderByAggregateInput
    _max?: OverviewDifficultyMaxOrderByAggregateInput
    _min?: OverviewDifficultyMinOrderByAggregateInput
    _sum?: OverviewDifficultySumOrderByAggregateInput
  }

  export type OverviewDifficultyScalarWhereWithAggregatesInput = {
    AND?: OverviewDifficultyScalarWhereWithAggregatesInput | OverviewDifficultyScalarWhereWithAggregatesInput[]
    OR?: OverviewDifficultyScalarWhereWithAggregatesInput[]
    NOT?: OverviewDifficultyScalarWhereWithAggregatesInput | OverviewDifficultyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OverviewDifficulty"> | number
    spec?: StringWithAggregatesFilter<"OverviewDifficulty"> | string
    mode?: StringWithAggregatesFilter<"OverviewDifficulty"> | string
    singleTarget?: IntWithAggregatesFilter<"OverviewDifficulty"> | number
    multiTarget?: IntWithAggregatesFilter<"OverviewDifficulty"> | number
    utility?: IntWithAggregatesFilter<"OverviewDifficulty"> | number
    survivability?: IntWithAggregatesFilter<"OverviewDifficulty"> | number
    mobility?: IntWithAggregatesFilter<"OverviewDifficulty"> | number
    guideId?: IntWithAggregatesFilter<"OverviewDifficulty"> | number
    createdAt?: DateTimeWithAggregatesFilter<"OverviewDifficulty"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OverviewDifficulty"> | Date | string
  }

  export type HeroTalentsWhereInput = {
    AND?: HeroTalentsWhereInput | HeroTalentsWhereInput[]
    OR?: HeroTalentsWhereInput[]
    NOT?: HeroTalentsWhereInput | HeroTalentsWhereInput[]
    id?: IntFilter<"HeroTalents"> | number
    guideId?: IntFilter<"HeroTalents"> | number
    createdAt?: DateTimeFilter<"HeroTalents"> | Date | string
    updatedAt?: DateTimeFilter<"HeroTalents"> | Date | string
    guide?: XOR<GuideScalarRelationFilter, GuideWhereInput>
    tabs?: TabListRelationFilter
  }

  export type HeroTalentsOrderByWithRelationInput = {
    id?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guide?: GuideOrderByWithRelationInput
    tabs?: TabOrderByRelationAggregateInput
  }

  export type HeroTalentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    guideId?: number
    AND?: HeroTalentsWhereInput | HeroTalentsWhereInput[]
    OR?: HeroTalentsWhereInput[]
    NOT?: HeroTalentsWhereInput | HeroTalentsWhereInput[]
    createdAt?: DateTimeFilter<"HeroTalents"> | Date | string
    updatedAt?: DateTimeFilter<"HeroTalents"> | Date | string
    guide?: XOR<GuideScalarRelationFilter, GuideWhereInput>
    tabs?: TabListRelationFilter
  }, "id" | "guideId">

  export type HeroTalentsOrderByWithAggregationInput = {
    id?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HeroTalentsCountOrderByAggregateInput
    _avg?: HeroTalentsAvgOrderByAggregateInput
    _max?: HeroTalentsMaxOrderByAggregateInput
    _min?: HeroTalentsMinOrderByAggregateInput
    _sum?: HeroTalentsSumOrderByAggregateInput
  }

  export type HeroTalentsScalarWhereWithAggregatesInput = {
    AND?: HeroTalentsScalarWhereWithAggregatesInput | HeroTalentsScalarWhereWithAggregatesInput[]
    OR?: HeroTalentsScalarWhereWithAggregatesInput[]
    NOT?: HeroTalentsScalarWhereWithAggregatesInput | HeroTalentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HeroTalents"> | number
    guideId?: IntWithAggregatesFilter<"HeroTalents"> | number
    createdAt?: DateTimeWithAggregatesFilter<"HeroTalents"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HeroTalents"> | Date | string
  }

  export type TabWhereInput = {
    AND?: TabWhereInput | TabWhereInput[]
    OR?: TabWhereInput[]
    NOT?: TabWhereInput | TabWhereInput[]
    id?: IntFilter<"Tab"> | number
    value?: StringFilter<"Tab"> | string
    label?: StringFilter<"Tab"> | string
    iconUrl?: StringNullableFilter<"Tab"> | string | null
    content?: StringFilter<"Tab"> | string
    heroTalentsId?: IntFilter<"Tab"> | number
    createdAt?: DateTimeFilter<"Tab"> | Date | string
    updatedAt?: DateTimeFilter<"Tab"> | Date | string
    heroTalents?: XOR<HeroTalentsScalarRelationFilter, HeroTalentsWhereInput>
  }

  export type TabOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    label?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    content?: SortOrder
    heroTalentsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    heroTalents?: HeroTalentsOrderByWithRelationInput
  }

  export type TabWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    value_heroTalentsId?: TabValue_heroTalentsIdCompoundUniqueInput
    AND?: TabWhereInput | TabWhereInput[]
    OR?: TabWhereInput[]
    NOT?: TabWhereInput | TabWhereInput[]
    value?: StringFilter<"Tab"> | string
    label?: StringFilter<"Tab"> | string
    iconUrl?: StringNullableFilter<"Tab"> | string | null
    content?: StringFilter<"Tab"> | string
    heroTalentsId?: IntFilter<"Tab"> | number
    createdAt?: DateTimeFilter<"Tab"> | Date | string
    updatedAt?: DateTimeFilter<"Tab"> | Date | string
    heroTalents?: XOR<HeroTalentsScalarRelationFilter, HeroTalentsWhereInput>
  }, "id" | "value_heroTalentsId">

  export type TabOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    label?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    content?: SortOrder
    heroTalentsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TabCountOrderByAggregateInput
    _avg?: TabAvgOrderByAggregateInput
    _max?: TabMaxOrderByAggregateInput
    _min?: TabMinOrderByAggregateInput
    _sum?: TabSumOrderByAggregateInput
  }

  export type TabScalarWhereWithAggregatesInput = {
    AND?: TabScalarWhereWithAggregatesInput | TabScalarWhereWithAggregatesInput[]
    OR?: TabScalarWhereWithAggregatesInput[]
    NOT?: TabScalarWhereWithAggregatesInput | TabScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tab"> | number
    value?: StringWithAggregatesFilter<"Tab"> | string
    label?: StringWithAggregatesFilter<"Tab"> | string
    iconUrl?: StringNullableWithAggregatesFilter<"Tab"> | string | null
    content?: StringWithAggregatesFilter<"Tab"> | string
    heroTalentsId?: IntWithAggregatesFilter<"Tab"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Tab"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tab"> | Date | string
  }

  export type UserCreateInput = {
    fullName: string
    email: string
    password: string
    role?: $Enums.UserRole
    provider?: string | null
    providerId?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    fullName: string
    email: string
    password: string
    role?: $Enums.UserRole
    provider?: string | null
    providerId?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type UserUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    fullName: string
    email: string
    password: string
    role?: $Enums.UserRole
    provider?: string | null
    providerId?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuideCreateInput = {
    spec: string
    mode: string
    title?: string | null
    patch?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    overviewDifficulty?: OverviewDifficultyCreateNestedOneWithoutGuideInput
    heroTalents?: HeroTalentsCreateNestedOneWithoutGuideInput
  }

  export type GuideUncheckedCreateInput = {
    id?: number
    spec: string
    mode: string
    title?: string | null
    patch?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    overviewDifficulty?: OverviewDifficultyUncheckedCreateNestedOneWithoutGuideInput
    heroTalents?: HeroTalentsUncheckedCreateNestedOneWithoutGuideInput
  }

  export type GuideUpdateInput = {
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overviewDifficulty?: OverviewDifficultyUpdateOneWithoutGuideNestedInput
    heroTalents?: HeroTalentsUpdateOneWithoutGuideNestedInput
  }

  export type GuideUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overviewDifficulty?: OverviewDifficultyUncheckedUpdateOneWithoutGuideNestedInput
    heroTalents?: HeroTalentsUncheckedUpdateOneWithoutGuideNestedInput
  }

  export type GuideCreateManyInput = {
    id?: number
    spec: string
    mode: string
    title?: string | null
    patch?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuideUpdateManyMutationInput = {
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuideUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OverviewDifficultyCreateInput = {
    spec: string
    mode: string
    singleTarget: number
    multiTarget: number
    utility: number
    survivability: number
    mobility: number
    createdAt?: Date | string
    updatedAt?: Date | string
    guide: GuideCreateNestedOneWithoutOverviewDifficultyInput
  }

  export type OverviewDifficultyUncheckedCreateInput = {
    id?: number
    spec: string
    mode: string
    singleTarget: number
    multiTarget: number
    utility: number
    survivability: number
    mobility: number
    guideId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OverviewDifficultyUpdateInput = {
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    singleTarget?: IntFieldUpdateOperationsInput | number
    multiTarget?: IntFieldUpdateOperationsInput | number
    utility?: IntFieldUpdateOperationsInput | number
    survivability?: IntFieldUpdateOperationsInput | number
    mobility?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guide?: GuideUpdateOneRequiredWithoutOverviewDifficultyNestedInput
  }

  export type OverviewDifficultyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    singleTarget?: IntFieldUpdateOperationsInput | number
    multiTarget?: IntFieldUpdateOperationsInput | number
    utility?: IntFieldUpdateOperationsInput | number
    survivability?: IntFieldUpdateOperationsInput | number
    mobility?: IntFieldUpdateOperationsInput | number
    guideId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OverviewDifficultyCreateManyInput = {
    id?: number
    spec: string
    mode: string
    singleTarget: number
    multiTarget: number
    utility: number
    survivability: number
    mobility: number
    guideId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OverviewDifficultyUpdateManyMutationInput = {
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    singleTarget?: IntFieldUpdateOperationsInput | number
    multiTarget?: IntFieldUpdateOperationsInput | number
    utility?: IntFieldUpdateOperationsInput | number
    survivability?: IntFieldUpdateOperationsInput | number
    mobility?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OverviewDifficultyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    singleTarget?: IntFieldUpdateOperationsInput | number
    multiTarget?: IntFieldUpdateOperationsInput | number
    utility?: IntFieldUpdateOperationsInput | number
    survivability?: IntFieldUpdateOperationsInput | number
    mobility?: IntFieldUpdateOperationsInput | number
    guideId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeroTalentsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    guide: GuideCreateNestedOneWithoutHeroTalentsInput
    tabs?: TabCreateNestedManyWithoutHeroTalentsInput
  }

  export type HeroTalentsUncheckedCreateInput = {
    id?: number
    guideId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tabs?: TabUncheckedCreateNestedManyWithoutHeroTalentsInput
  }

  export type HeroTalentsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guide?: GuideUpdateOneRequiredWithoutHeroTalentsNestedInput
    tabs?: TabUpdateManyWithoutHeroTalentsNestedInput
  }

  export type HeroTalentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    guideId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tabs?: TabUncheckedUpdateManyWithoutHeroTalentsNestedInput
  }

  export type HeroTalentsCreateManyInput = {
    id?: number
    guideId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HeroTalentsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeroTalentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    guideId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TabCreateInput = {
    value: string
    label: string
    iconUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    heroTalents: HeroTalentsCreateNestedOneWithoutTabsInput
  }

  export type TabUncheckedCreateInput = {
    id?: number
    value: string
    label: string
    iconUrl?: string | null
    content: string
    heroTalentsId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TabUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heroTalents?: HeroTalentsUpdateOneRequiredWithoutTabsNestedInput
  }

  export type TabUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    heroTalentsId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TabCreateManyInput = {
    id?: number
    value: string
    label: string
    iconUrl?: string | null
    content: string
    heroTalentsId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TabUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TabUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    heroTalentsId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type OverviewDifficultyNullableScalarRelationFilter = {
    is?: OverviewDifficultyWhereInput | null
    isNot?: OverviewDifficultyWhereInput | null
  }

  export type HeroTalentsNullableScalarRelationFilter = {
    is?: HeroTalentsWhereInput | null
    isNot?: HeroTalentsWhereInput | null
  }

  export type GuideCountOrderByAggregateInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    title?: SortOrder
    patch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuideAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GuideMaxOrderByAggregateInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    title?: SortOrder
    patch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuideMinOrderByAggregateInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    title?: SortOrder
    patch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuideSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GuideScalarRelationFilter = {
    is?: GuideWhereInput
    isNot?: GuideWhereInput
  }

  export type OverviewDifficultyCountOrderByAggregateInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    singleTarget?: SortOrder
    multiTarget?: SortOrder
    utility?: SortOrder
    survivability?: SortOrder
    mobility?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OverviewDifficultyAvgOrderByAggregateInput = {
    id?: SortOrder
    singleTarget?: SortOrder
    multiTarget?: SortOrder
    utility?: SortOrder
    survivability?: SortOrder
    mobility?: SortOrder
    guideId?: SortOrder
  }

  export type OverviewDifficultyMaxOrderByAggregateInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    singleTarget?: SortOrder
    multiTarget?: SortOrder
    utility?: SortOrder
    survivability?: SortOrder
    mobility?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OverviewDifficultyMinOrderByAggregateInput = {
    id?: SortOrder
    spec?: SortOrder
    mode?: SortOrder
    singleTarget?: SortOrder
    multiTarget?: SortOrder
    utility?: SortOrder
    survivability?: SortOrder
    mobility?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OverviewDifficultySumOrderByAggregateInput = {
    id?: SortOrder
    singleTarget?: SortOrder
    multiTarget?: SortOrder
    utility?: SortOrder
    survivability?: SortOrder
    mobility?: SortOrder
    guideId?: SortOrder
  }

  export type TabListRelationFilter = {
    every?: TabWhereInput
    some?: TabWhereInput
    none?: TabWhereInput
  }

  export type TabOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HeroTalentsCountOrderByAggregateInput = {
    id?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HeroTalentsAvgOrderByAggregateInput = {
    id?: SortOrder
    guideId?: SortOrder
  }

  export type HeroTalentsMaxOrderByAggregateInput = {
    id?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HeroTalentsMinOrderByAggregateInput = {
    id?: SortOrder
    guideId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HeroTalentsSumOrderByAggregateInput = {
    id?: SortOrder
    guideId?: SortOrder
  }

  export type HeroTalentsScalarRelationFilter = {
    is?: HeroTalentsWhereInput
    isNot?: HeroTalentsWhereInput
  }

  export type TabValue_heroTalentsIdCompoundUniqueInput = {
    value: string
    heroTalentsId: number
  }

  export type TabCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    label?: SortOrder
    iconUrl?: SortOrder
    content?: SortOrder
    heroTalentsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TabAvgOrderByAggregateInput = {
    id?: SortOrder
    heroTalentsId?: SortOrder
  }

  export type TabMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    label?: SortOrder
    iconUrl?: SortOrder
    content?: SortOrder
    heroTalentsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TabMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    label?: SortOrder
    iconUrl?: SortOrder
    content?: SortOrder
    heroTalentsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TabSumOrderByAggregateInput = {
    id?: SortOrder
    heroTalentsId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OverviewDifficultyCreateNestedOneWithoutGuideInput = {
    create?: XOR<OverviewDifficultyCreateWithoutGuideInput, OverviewDifficultyUncheckedCreateWithoutGuideInput>
    connectOrCreate?: OverviewDifficultyCreateOrConnectWithoutGuideInput
    connect?: OverviewDifficultyWhereUniqueInput
  }

  export type HeroTalentsCreateNestedOneWithoutGuideInput = {
    create?: XOR<HeroTalentsCreateWithoutGuideInput, HeroTalentsUncheckedCreateWithoutGuideInput>
    connectOrCreate?: HeroTalentsCreateOrConnectWithoutGuideInput
    connect?: HeroTalentsWhereUniqueInput
  }

  export type OverviewDifficultyUncheckedCreateNestedOneWithoutGuideInput = {
    create?: XOR<OverviewDifficultyCreateWithoutGuideInput, OverviewDifficultyUncheckedCreateWithoutGuideInput>
    connectOrCreate?: OverviewDifficultyCreateOrConnectWithoutGuideInput
    connect?: OverviewDifficultyWhereUniqueInput
  }

  export type HeroTalentsUncheckedCreateNestedOneWithoutGuideInput = {
    create?: XOR<HeroTalentsCreateWithoutGuideInput, HeroTalentsUncheckedCreateWithoutGuideInput>
    connectOrCreate?: HeroTalentsCreateOrConnectWithoutGuideInput
    connect?: HeroTalentsWhereUniqueInput
  }

  export type OverviewDifficultyUpdateOneWithoutGuideNestedInput = {
    create?: XOR<OverviewDifficultyCreateWithoutGuideInput, OverviewDifficultyUncheckedCreateWithoutGuideInput>
    connectOrCreate?: OverviewDifficultyCreateOrConnectWithoutGuideInput
    upsert?: OverviewDifficultyUpsertWithoutGuideInput
    disconnect?: OverviewDifficultyWhereInput | boolean
    delete?: OverviewDifficultyWhereInput | boolean
    connect?: OverviewDifficultyWhereUniqueInput
    update?: XOR<XOR<OverviewDifficultyUpdateToOneWithWhereWithoutGuideInput, OverviewDifficultyUpdateWithoutGuideInput>, OverviewDifficultyUncheckedUpdateWithoutGuideInput>
  }

  export type HeroTalentsUpdateOneWithoutGuideNestedInput = {
    create?: XOR<HeroTalentsCreateWithoutGuideInput, HeroTalentsUncheckedCreateWithoutGuideInput>
    connectOrCreate?: HeroTalentsCreateOrConnectWithoutGuideInput
    upsert?: HeroTalentsUpsertWithoutGuideInput
    disconnect?: HeroTalentsWhereInput | boolean
    delete?: HeroTalentsWhereInput | boolean
    connect?: HeroTalentsWhereUniqueInput
    update?: XOR<XOR<HeroTalentsUpdateToOneWithWhereWithoutGuideInput, HeroTalentsUpdateWithoutGuideInput>, HeroTalentsUncheckedUpdateWithoutGuideInput>
  }

  export type OverviewDifficultyUncheckedUpdateOneWithoutGuideNestedInput = {
    create?: XOR<OverviewDifficultyCreateWithoutGuideInput, OverviewDifficultyUncheckedCreateWithoutGuideInput>
    connectOrCreate?: OverviewDifficultyCreateOrConnectWithoutGuideInput
    upsert?: OverviewDifficultyUpsertWithoutGuideInput
    disconnect?: OverviewDifficultyWhereInput | boolean
    delete?: OverviewDifficultyWhereInput | boolean
    connect?: OverviewDifficultyWhereUniqueInput
    update?: XOR<XOR<OverviewDifficultyUpdateToOneWithWhereWithoutGuideInput, OverviewDifficultyUpdateWithoutGuideInput>, OverviewDifficultyUncheckedUpdateWithoutGuideInput>
  }

  export type HeroTalentsUncheckedUpdateOneWithoutGuideNestedInput = {
    create?: XOR<HeroTalentsCreateWithoutGuideInput, HeroTalentsUncheckedCreateWithoutGuideInput>
    connectOrCreate?: HeroTalentsCreateOrConnectWithoutGuideInput
    upsert?: HeroTalentsUpsertWithoutGuideInput
    disconnect?: HeroTalentsWhereInput | boolean
    delete?: HeroTalentsWhereInput | boolean
    connect?: HeroTalentsWhereUniqueInput
    update?: XOR<XOR<HeroTalentsUpdateToOneWithWhereWithoutGuideInput, HeroTalentsUpdateWithoutGuideInput>, HeroTalentsUncheckedUpdateWithoutGuideInput>
  }

  export type GuideCreateNestedOneWithoutOverviewDifficultyInput = {
    create?: XOR<GuideCreateWithoutOverviewDifficultyInput, GuideUncheckedCreateWithoutOverviewDifficultyInput>
    connectOrCreate?: GuideCreateOrConnectWithoutOverviewDifficultyInput
    connect?: GuideWhereUniqueInput
  }

  export type GuideUpdateOneRequiredWithoutOverviewDifficultyNestedInput = {
    create?: XOR<GuideCreateWithoutOverviewDifficultyInput, GuideUncheckedCreateWithoutOverviewDifficultyInput>
    connectOrCreate?: GuideCreateOrConnectWithoutOverviewDifficultyInput
    upsert?: GuideUpsertWithoutOverviewDifficultyInput
    connect?: GuideWhereUniqueInput
    update?: XOR<XOR<GuideUpdateToOneWithWhereWithoutOverviewDifficultyInput, GuideUpdateWithoutOverviewDifficultyInput>, GuideUncheckedUpdateWithoutOverviewDifficultyInput>
  }

  export type GuideCreateNestedOneWithoutHeroTalentsInput = {
    create?: XOR<GuideCreateWithoutHeroTalentsInput, GuideUncheckedCreateWithoutHeroTalentsInput>
    connectOrCreate?: GuideCreateOrConnectWithoutHeroTalentsInput
    connect?: GuideWhereUniqueInput
  }

  export type TabCreateNestedManyWithoutHeroTalentsInput = {
    create?: XOR<TabCreateWithoutHeroTalentsInput, TabUncheckedCreateWithoutHeroTalentsInput> | TabCreateWithoutHeroTalentsInput[] | TabUncheckedCreateWithoutHeroTalentsInput[]
    connectOrCreate?: TabCreateOrConnectWithoutHeroTalentsInput | TabCreateOrConnectWithoutHeroTalentsInput[]
    createMany?: TabCreateManyHeroTalentsInputEnvelope
    connect?: TabWhereUniqueInput | TabWhereUniqueInput[]
  }

  export type TabUncheckedCreateNestedManyWithoutHeroTalentsInput = {
    create?: XOR<TabCreateWithoutHeroTalentsInput, TabUncheckedCreateWithoutHeroTalentsInput> | TabCreateWithoutHeroTalentsInput[] | TabUncheckedCreateWithoutHeroTalentsInput[]
    connectOrCreate?: TabCreateOrConnectWithoutHeroTalentsInput | TabCreateOrConnectWithoutHeroTalentsInput[]
    createMany?: TabCreateManyHeroTalentsInputEnvelope
    connect?: TabWhereUniqueInput | TabWhereUniqueInput[]
  }

  export type GuideUpdateOneRequiredWithoutHeroTalentsNestedInput = {
    create?: XOR<GuideCreateWithoutHeroTalentsInput, GuideUncheckedCreateWithoutHeroTalentsInput>
    connectOrCreate?: GuideCreateOrConnectWithoutHeroTalentsInput
    upsert?: GuideUpsertWithoutHeroTalentsInput
    connect?: GuideWhereUniqueInput
    update?: XOR<XOR<GuideUpdateToOneWithWhereWithoutHeroTalentsInput, GuideUpdateWithoutHeroTalentsInput>, GuideUncheckedUpdateWithoutHeroTalentsInput>
  }

  export type TabUpdateManyWithoutHeroTalentsNestedInput = {
    create?: XOR<TabCreateWithoutHeroTalentsInput, TabUncheckedCreateWithoutHeroTalentsInput> | TabCreateWithoutHeroTalentsInput[] | TabUncheckedCreateWithoutHeroTalentsInput[]
    connectOrCreate?: TabCreateOrConnectWithoutHeroTalentsInput | TabCreateOrConnectWithoutHeroTalentsInput[]
    upsert?: TabUpsertWithWhereUniqueWithoutHeroTalentsInput | TabUpsertWithWhereUniqueWithoutHeroTalentsInput[]
    createMany?: TabCreateManyHeroTalentsInputEnvelope
    set?: TabWhereUniqueInput | TabWhereUniqueInput[]
    disconnect?: TabWhereUniqueInput | TabWhereUniqueInput[]
    delete?: TabWhereUniqueInput | TabWhereUniqueInput[]
    connect?: TabWhereUniqueInput | TabWhereUniqueInput[]
    update?: TabUpdateWithWhereUniqueWithoutHeroTalentsInput | TabUpdateWithWhereUniqueWithoutHeroTalentsInput[]
    updateMany?: TabUpdateManyWithWhereWithoutHeroTalentsInput | TabUpdateManyWithWhereWithoutHeroTalentsInput[]
    deleteMany?: TabScalarWhereInput | TabScalarWhereInput[]
  }

  export type TabUncheckedUpdateManyWithoutHeroTalentsNestedInput = {
    create?: XOR<TabCreateWithoutHeroTalentsInput, TabUncheckedCreateWithoutHeroTalentsInput> | TabCreateWithoutHeroTalentsInput[] | TabUncheckedCreateWithoutHeroTalentsInput[]
    connectOrCreate?: TabCreateOrConnectWithoutHeroTalentsInput | TabCreateOrConnectWithoutHeroTalentsInput[]
    upsert?: TabUpsertWithWhereUniqueWithoutHeroTalentsInput | TabUpsertWithWhereUniqueWithoutHeroTalentsInput[]
    createMany?: TabCreateManyHeroTalentsInputEnvelope
    set?: TabWhereUniqueInput | TabWhereUniqueInput[]
    disconnect?: TabWhereUniqueInput | TabWhereUniqueInput[]
    delete?: TabWhereUniqueInput | TabWhereUniqueInput[]
    connect?: TabWhereUniqueInput | TabWhereUniqueInput[]
    update?: TabUpdateWithWhereUniqueWithoutHeroTalentsInput | TabUpdateWithWhereUniqueWithoutHeroTalentsInput[]
    updateMany?: TabUpdateManyWithWhereWithoutHeroTalentsInput | TabUpdateManyWithWhereWithoutHeroTalentsInput[]
    deleteMany?: TabScalarWhereInput | TabScalarWhereInput[]
  }

  export type HeroTalentsCreateNestedOneWithoutTabsInput = {
    create?: XOR<HeroTalentsCreateWithoutTabsInput, HeroTalentsUncheckedCreateWithoutTabsInput>
    connectOrCreate?: HeroTalentsCreateOrConnectWithoutTabsInput
    connect?: HeroTalentsWhereUniqueInput
  }

  export type HeroTalentsUpdateOneRequiredWithoutTabsNestedInput = {
    create?: XOR<HeroTalentsCreateWithoutTabsInput, HeroTalentsUncheckedCreateWithoutTabsInput>
    connectOrCreate?: HeroTalentsCreateOrConnectWithoutTabsInput
    upsert?: HeroTalentsUpsertWithoutTabsInput
    connect?: HeroTalentsWhereUniqueInput
    update?: XOR<XOR<HeroTalentsUpdateToOneWithWhereWithoutTabsInput, HeroTalentsUpdateWithoutTabsInput>, HeroTalentsUncheckedUpdateWithoutTabsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type OverviewDifficultyCreateWithoutGuideInput = {
    spec: string
    mode: string
    singleTarget: number
    multiTarget: number
    utility: number
    survivability: number
    mobility: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OverviewDifficultyUncheckedCreateWithoutGuideInput = {
    id?: number
    spec: string
    mode: string
    singleTarget: number
    multiTarget: number
    utility: number
    survivability: number
    mobility: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OverviewDifficultyCreateOrConnectWithoutGuideInput = {
    where: OverviewDifficultyWhereUniqueInput
    create: XOR<OverviewDifficultyCreateWithoutGuideInput, OverviewDifficultyUncheckedCreateWithoutGuideInput>
  }

  export type HeroTalentsCreateWithoutGuideInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    tabs?: TabCreateNestedManyWithoutHeroTalentsInput
  }

  export type HeroTalentsUncheckedCreateWithoutGuideInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tabs?: TabUncheckedCreateNestedManyWithoutHeroTalentsInput
  }

  export type HeroTalentsCreateOrConnectWithoutGuideInput = {
    where: HeroTalentsWhereUniqueInput
    create: XOR<HeroTalentsCreateWithoutGuideInput, HeroTalentsUncheckedCreateWithoutGuideInput>
  }

  export type OverviewDifficultyUpsertWithoutGuideInput = {
    update: XOR<OverviewDifficultyUpdateWithoutGuideInput, OverviewDifficultyUncheckedUpdateWithoutGuideInput>
    create: XOR<OverviewDifficultyCreateWithoutGuideInput, OverviewDifficultyUncheckedCreateWithoutGuideInput>
    where?: OverviewDifficultyWhereInput
  }

  export type OverviewDifficultyUpdateToOneWithWhereWithoutGuideInput = {
    where?: OverviewDifficultyWhereInput
    data: XOR<OverviewDifficultyUpdateWithoutGuideInput, OverviewDifficultyUncheckedUpdateWithoutGuideInput>
  }

  export type OverviewDifficultyUpdateWithoutGuideInput = {
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    singleTarget?: IntFieldUpdateOperationsInput | number
    multiTarget?: IntFieldUpdateOperationsInput | number
    utility?: IntFieldUpdateOperationsInput | number
    survivability?: IntFieldUpdateOperationsInput | number
    mobility?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OverviewDifficultyUncheckedUpdateWithoutGuideInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    singleTarget?: IntFieldUpdateOperationsInput | number
    multiTarget?: IntFieldUpdateOperationsInput | number
    utility?: IntFieldUpdateOperationsInput | number
    survivability?: IntFieldUpdateOperationsInput | number
    mobility?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeroTalentsUpsertWithoutGuideInput = {
    update: XOR<HeroTalentsUpdateWithoutGuideInput, HeroTalentsUncheckedUpdateWithoutGuideInput>
    create: XOR<HeroTalentsCreateWithoutGuideInput, HeroTalentsUncheckedCreateWithoutGuideInput>
    where?: HeroTalentsWhereInput
  }

  export type HeroTalentsUpdateToOneWithWhereWithoutGuideInput = {
    where?: HeroTalentsWhereInput
    data: XOR<HeroTalentsUpdateWithoutGuideInput, HeroTalentsUncheckedUpdateWithoutGuideInput>
  }

  export type HeroTalentsUpdateWithoutGuideInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tabs?: TabUpdateManyWithoutHeroTalentsNestedInput
  }

  export type HeroTalentsUncheckedUpdateWithoutGuideInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tabs?: TabUncheckedUpdateManyWithoutHeroTalentsNestedInput
  }

  export type GuideCreateWithoutOverviewDifficultyInput = {
    spec: string
    mode: string
    title?: string | null
    patch?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heroTalents?: HeroTalentsCreateNestedOneWithoutGuideInput
  }

  export type GuideUncheckedCreateWithoutOverviewDifficultyInput = {
    id?: number
    spec: string
    mode: string
    title?: string | null
    patch?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heroTalents?: HeroTalentsUncheckedCreateNestedOneWithoutGuideInput
  }

  export type GuideCreateOrConnectWithoutOverviewDifficultyInput = {
    where: GuideWhereUniqueInput
    create: XOR<GuideCreateWithoutOverviewDifficultyInput, GuideUncheckedCreateWithoutOverviewDifficultyInput>
  }

  export type GuideUpsertWithoutOverviewDifficultyInput = {
    update: XOR<GuideUpdateWithoutOverviewDifficultyInput, GuideUncheckedUpdateWithoutOverviewDifficultyInput>
    create: XOR<GuideCreateWithoutOverviewDifficultyInput, GuideUncheckedCreateWithoutOverviewDifficultyInput>
    where?: GuideWhereInput
  }

  export type GuideUpdateToOneWithWhereWithoutOverviewDifficultyInput = {
    where?: GuideWhereInput
    data: XOR<GuideUpdateWithoutOverviewDifficultyInput, GuideUncheckedUpdateWithoutOverviewDifficultyInput>
  }

  export type GuideUpdateWithoutOverviewDifficultyInput = {
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heroTalents?: HeroTalentsUpdateOneWithoutGuideNestedInput
  }

  export type GuideUncheckedUpdateWithoutOverviewDifficultyInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heroTalents?: HeroTalentsUncheckedUpdateOneWithoutGuideNestedInput
  }

  export type GuideCreateWithoutHeroTalentsInput = {
    spec: string
    mode: string
    title?: string | null
    patch?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    overviewDifficulty?: OverviewDifficultyCreateNestedOneWithoutGuideInput
  }

  export type GuideUncheckedCreateWithoutHeroTalentsInput = {
    id?: number
    spec: string
    mode: string
    title?: string | null
    patch?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    overviewDifficulty?: OverviewDifficultyUncheckedCreateNestedOneWithoutGuideInput
  }

  export type GuideCreateOrConnectWithoutHeroTalentsInput = {
    where: GuideWhereUniqueInput
    create: XOR<GuideCreateWithoutHeroTalentsInput, GuideUncheckedCreateWithoutHeroTalentsInput>
  }

  export type TabCreateWithoutHeroTalentsInput = {
    value: string
    label: string
    iconUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TabUncheckedCreateWithoutHeroTalentsInput = {
    id?: number
    value: string
    label: string
    iconUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TabCreateOrConnectWithoutHeroTalentsInput = {
    where: TabWhereUniqueInput
    create: XOR<TabCreateWithoutHeroTalentsInput, TabUncheckedCreateWithoutHeroTalentsInput>
  }

  export type TabCreateManyHeroTalentsInputEnvelope = {
    data: TabCreateManyHeroTalentsInput | TabCreateManyHeroTalentsInput[]
    skipDuplicates?: boolean
  }

  export type GuideUpsertWithoutHeroTalentsInput = {
    update: XOR<GuideUpdateWithoutHeroTalentsInput, GuideUncheckedUpdateWithoutHeroTalentsInput>
    create: XOR<GuideCreateWithoutHeroTalentsInput, GuideUncheckedCreateWithoutHeroTalentsInput>
    where?: GuideWhereInput
  }

  export type GuideUpdateToOneWithWhereWithoutHeroTalentsInput = {
    where?: GuideWhereInput
    data: XOR<GuideUpdateWithoutHeroTalentsInput, GuideUncheckedUpdateWithoutHeroTalentsInput>
  }

  export type GuideUpdateWithoutHeroTalentsInput = {
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overviewDifficulty?: OverviewDifficultyUpdateOneWithoutGuideNestedInput
  }

  export type GuideUncheckedUpdateWithoutHeroTalentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    patch?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    overviewDifficulty?: OverviewDifficultyUncheckedUpdateOneWithoutGuideNestedInput
  }

  export type TabUpsertWithWhereUniqueWithoutHeroTalentsInput = {
    where: TabWhereUniqueInput
    update: XOR<TabUpdateWithoutHeroTalentsInput, TabUncheckedUpdateWithoutHeroTalentsInput>
    create: XOR<TabCreateWithoutHeroTalentsInput, TabUncheckedCreateWithoutHeroTalentsInput>
  }

  export type TabUpdateWithWhereUniqueWithoutHeroTalentsInput = {
    where: TabWhereUniqueInput
    data: XOR<TabUpdateWithoutHeroTalentsInput, TabUncheckedUpdateWithoutHeroTalentsInput>
  }

  export type TabUpdateManyWithWhereWithoutHeroTalentsInput = {
    where: TabScalarWhereInput
    data: XOR<TabUpdateManyMutationInput, TabUncheckedUpdateManyWithoutHeroTalentsInput>
  }

  export type TabScalarWhereInput = {
    AND?: TabScalarWhereInput | TabScalarWhereInput[]
    OR?: TabScalarWhereInput[]
    NOT?: TabScalarWhereInput | TabScalarWhereInput[]
    id?: IntFilter<"Tab"> | number
    value?: StringFilter<"Tab"> | string
    label?: StringFilter<"Tab"> | string
    iconUrl?: StringNullableFilter<"Tab"> | string | null
    content?: StringFilter<"Tab"> | string
    heroTalentsId?: IntFilter<"Tab"> | number
    createdAt?: DateTimeFilter<"Tab"> | Date | string
    updatedAt?: DateTimeFilter<"Tab"> | Date | string
  }

  export type HeroTalentsCreateWithoutTabsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    guide: GuideCreateNestedOneWithoutHeroTalentsInput
  }

  export type HeroTalentsUncheckedCreateWithoutTabsInput = {
    id?: number
    guideId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HeroTalentsCreateOrConnectWithoutTabsInput = {
    where: HeroTalentsWhereUniqueInput
    create: XOR<HeroTalentsCreateWithoutTabsInput, HeroTalentsUncheckedCreateWithoutTabsInput>
  }

  export type HeroTalentsUpsertWithoutTabsInput = {
    update: XOR<HeroTalentsUpdateWithoutTabsInput, HeroTalentsUncheckedUpdateWithoutTabsInput>
    create: XOR<HeroTalentsCreateWithoutTabsInput, HeroTalentsUncheckedCreateWithoutTabsInput>
    where?: HeroTalentsWhereInput
  }

  export type HeroTalentsUpdateToOneWithWhereWithoutTabsInput = {
    where?: HeroTalentsWhereInput
    data: XOR<HeroTalentsUpdateWithoutTabsInput, HeroTalentsUncheckedUpdateWithoutTabsInput>
  }

  export type HeroTalentsUpdateWithoutTabsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guide?: GuideUpdateOneRequiredWithoutHeroTalentsNestedInput
  }

  export type HeroTalentsUncheckedUpdateWithoutTabsInput = {
    id?: IntFieldUpdateOperationsInput | number
    guideId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TabCreateManyHeroTalentsInput = {
    id?: number
    value: string
    label: string
    iconUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TabUpdateWithoutHeroTalentsInput = {
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TabUncheckedUpdateWithoutHeroTalentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TabUncheckedUpdateManyWithoutHeroTalentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}